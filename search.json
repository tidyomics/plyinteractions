[{"path":"/articles/plyinteractions.html","id":"install-plyinteractions","dir":"Articles","previous_headings":"","what":"Install plyinteractions","title":"plyinteractions","text":"plyinteractions R package available via Bioconductor. can install plyinteractions using following commands R session:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") } BiocManager::install(\"plyinteractions\")"},{"path":"/articles/plyinteractions.html","id":"quick-start-to-using-plyinteractions","dir":"Articles","previous_headings":"","what":"Quick start to using plyinteractions","title":"plyinteractions","text":"GInteractions objects describing interactions pairs genomic ranges:","code":"library(GenomicRanges) library(InteractionSet) anchor1 <- GRanges(\"chr1:10-20:+\") anchor2 <- GRanges(\"chr1:50-60:-\") gi <- GInteractions(anchor1, anchor2)  gi #> GInteractions object with 1 interaction and 0 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 #>           <Rle> <IRanges>         <Rle> <IRanges> #>   [1]      chr1     10-20 ---      chr1     50-60 #>   ------- #>   regions: 2 ranges and 0 metadata columns #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"/articles/plyinteractions.html","id":"importing-genomic-interactions-in-r","dir":"Articles","previous_headings":"Quick start to using plyinteractions","what":"Importing genomic interactions in R","title":"plyinteractions","text":"plyinteractions provides consistent interface importing genomic interactions pairs bedpe files GInteractions R, following grammar tidy data manipulation defined tidyverse ecosystem. Tidy genomic data maniuplation implies first parse genomic files stored disk tabular data frames. Genomic interactions tabular format easy manipulate. can easily parse data.frame GInteractions object using as_ginteractions function. columns containing information core fields future GInteractions object (e.g. seqnames1, strand2, …) can specified using key = value (supported quasiquotation). reverse operation coerce GInteractions back tabular form also possible using as_tibble function tibble package:","code":"bedpe_file <- system.file(\"tests\", \"test.bedpe\", package = \"rtracklayer\") bedpe_df <- read.delim(bedpe_file, header = FALSE, sep = '\\t')  bedpe_df #>      V1        V2        V3    V4        V5        V6                      V7 #> 1  chr7 118965072 118965122  chr7 118970079 118970129 TUPAC_0001:3:1:0:1452#0 #> 2 chr11  46765606  46765656 chr10  46769934  46769984 TUPAC_0001:3:1:0:1472#0 #> 3 chr20  54704674  54704724 chr20  54708987  54709037 TUPAC_0001:3:1:1:1833#0 #>   V8 V9 V10 #> 1 37  +   - #> 2 37  +   - #> 3 37  +   - gi <- bedpe_df |>      as_ginteractions(         seqnames1 = V1, start1 = V2, end1 = V3, strand1 = V9,          seqnames2 = V4, start2 = V5, end2 = V6, strand2 = V10,          starts.in.df.are.0based = TRUE     ) #> Warning in .merge_two_Seqinfo_objects(x, y): Each of the 2 combined objects has sequence levels not in the other: #>   - in 'x': chr11 #>   - in 'y': chr10 #>   Make sure to always combine/compare objects based on the same reference #>   genome (use suppressWarnings() to suppress this warning).  gi #> GInteractions object with 3 interactions and 2 metadata columns: #>       seqnames1             ranges1     seqnames2             ranges2 | #>           <Rle>           <IRanges>         <Rle>           <IRanges> | #>   [1]      chr7 118965073-118965122 ---      chr7 118970080-118970129 | #>   [2]     chr11   46765607-46765656 ---     chr10   46769935-46769984 | #>   [3]     chr20   54704675-54704724 ---     chr20   54708988-54709037 | #>                           V7        V8 #>                  <character> <integer> #>   [1] TUPAC_0001:3:1:0:145..        37 #>   [2] TUPAC_0001:3:1:0:147..        37 #>   [3] TUPAC_0001:3:1:1:183..        37 #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 4 sequences from an unspecified genome; no seqlengths tibble::as_tibble(gi) #> # A tibble: 3 × 12 #>   seqnames1  start1   end1 width1 strand1 seqnames2 start2   end2 width2 strand2 #>   <fct>       <int>  <int>  <int> <fct>   <fct>      <int>  <int>  <int> <fct>   #> 1 chr7       1.19e8 1.19e8     50 +       chr7      1.19e8 1.19e8     50 -       #> 2 chr11      4.68e7 4.68e7     50 +       chr10     4.68e7 4.68e7     50 -       #> 3 chr20      5.47e7 5.47e7     50 +       chr20     5.47e7 5.47e7     50 -       #> # ℹ 2 more variables: V7 <chr>, V8 <int>"},{"path":"/articles/plyinteractions.html","id":"manipulating-ginteractions","dir":"Articles","previous_headings":"Quick start to using plyinteractions","what":"Manipulating GInteractions","title":"plyinteractions","text":"plyinteractions provides set verbs developing analysis pipelines based GInteractions objects represent genomic interactions.","code":""},{"path":"/articles/plyinteractions.html","id":"mutating-columns","dir":"Articles","previous_headings":"Quick start to using plyinteractions > Manipulating GInteractions","what":"Mutating columns","title":"plyinteractions","text":"mutate supports accessing existing columns:","code":"gi |> mutate(cis = seqnames1 == seqnames2) #> GInteractions object with 3 interactions and 3 metadata columns: #>       seqnames1             ranges1     seqnames2             ranges2 | #>           <Rle>           <IRanges>         <Rle>           <IRanges> | #>   [1]      chr7 118965073-118965122 ---      chr7 118970080-118970129 | #>   [2]     chr11   46765607-46765656 ---     chr10   46769935-46769984 | #>   [3]     chr20   54704675-54704724 ---     chr20   54708988-54709037 | #>                           V7        V8   cis #>                  <character> <integer> <Rle> #>   [1] TUPAC_0001:3:1:0:145..        37  TRUE #>   [2] TUPAC_0001:3:1:0:147..        37 FALSE #>   [3] TUPAC_0001:3:1:1:183..        37  TRUE #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 4 sequences from an unspecified genome; no seqlengths  gi |> mutate(both_chr = paste(seqnames1, seqnames2, sep = \"_\")) #> GInteractions object with 3 interactions and 3 metadata columns: #>       seqnames1             ranges1     seqnames2             ranges2 | #>           <Rle>           <IRanges>         <Rle>           <IRanges> | #>   [1]      chr7 118965073-118965122 ---      chr7 118970080-118970129 | #>   [2]     chr11   46765607-46765656 ---     chr10   46769935-46769984 | #>   [3]     chr20   54704675-54704724 ---     chr20   54708988-54709037 | #>                           V7        V8    both_chr #>                  <character> <integer>       <Rle> #>   [1] TUPAC_0001:3:1:0:145..        37   chr7_chr7 #>   [2] TUPAC_0001:3:1:0:147..        37 chr11_chr10 #>   [3] TUPAC_0001:3:1:1:183..        37 chr20_chr20 #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 4 sequences from an unspecified genome; no seqlengths  gi |> mutate(start1 = 1) #> GInteractions object with 3 interactions and 2 metadata columns: #>       seqnames1     ranges1     seqnames2             ranges2 | #>           <Rle>   <IRanges>         <Rle>           <IRanges> | #>   [1]      chr7 1-118965122 ---      chr7 118970080-118970129 | #>   [2]     chr11  1-46765656 ---     chr10   46769935-46769984 | #>   [3]     chr20  1-54704724 ---     chr20   54708988-54709037 | #>                           V7        V8 #>                  <character> <integer> #>   [1] TUPAC_0001:3:1:0:145..        37 #>   [2] TUPAC_0001:3:1:0:147..        37 #>   [3] TUPAC_0001:3:1:1:183..        37 #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 4 sequences from an unspecified genome; no seqlengths"},{"path":"/articles/plyinteractions.html","id":"filtering-columns","dir":"Articles","previous_headings":"Quick start to using plyinteractions > Manipulating GInteractions","what":"Filtering columns","title":"plyinteractions","text":"filter supports logical expressions:","code":"gi |> filter(seqnames1 == 'chr11') #> GInteractions object with 1 interaction and 2 metadata columns: #>       seqnames1           ranges1     seqnames2           ranges2 | #>           <Rle>         <IRanges>         <Rle>         <IRanges> | #>   [1]     chr11 46765607-46765656 ---     chr10 46769935-46769984 | #>                           V7        V8 #>                  <character> <integer> #>   [1] TUPAC_0001:3:1:0:147..        37 #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 4 sequences from an unspecified genome; no seqlengths  gi |> filter(start1 >= 1e8) #> GInteractions object with 1 interaction and 2 metadata columns: #>       seqnames1             ranges1     seqnames2             ranges2 | #>           <Rle>           <IRanges>         <Rle>           <IRanges> | #>   [1]      chr7 118965073-118965122 ---      chr7 118970080-118970129 | #>                           V7        V8 #>                  <character> <integer> #>   [1] TUPAC_0001:3:1:0:145..        37 #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 4 sequences from an unspecified genome; no seqlengths  gi |> filter(seqnames1 == seqnames2) #> GInteractions object with 2 interactions and 2 metadata columns: #>       seqnames1             ranges1     seqnames2             ranges2 | #>           <Rle>           <IRanges>         <Rle>           <IRanges> | #>   [1]      chr7 118965073-118965122 ---      chr7 118970080-118970129 | #>   [2]     chr20   54704675-54704724 ---     chr20   54708988-54709037 | #>                           V7        V8 #>                  <character> <integer> #>   [1] TUPAC_0001:3:1:0:145..        37 #>   [2] TUPAC_0001:3:1:1:183..        37 #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 4 sequences from an unspecified genome; no seqlengths"},{"path":"/articles/plyinteractions.html","id":"selecting-columns","dir":"Articles","previous_headings":"Quick start to using plyinteractions > Manipulating GInteractions","what":"Selecting columns","title":"plyinteractions","text":"select supports <tidy-select> arguments: Note core fields (e.g. seqnames1, strand2, …) retrieved using approach, metadata columns parsed. Selecting subset core fields GInteractions lead loss required information (non-selected core fields).","code":"gi |> select(V7) #> GInteractions object with 3 interactions and 1 metadata column: #>       seqnames1             ranges1     seqnames2             ranges2 | #>           <Rle>           <IRanges>         <Rle>           <IRanges> | #>   [1]      chr7 118965073-118965122 ---      chr7 118970080-118970129 | #>   [2]     chr11   46765607-46765656 ---     chr10   46769935-46769984 | #>   [3]     chr20   54704675-54704724 ---     chr20   54708988-54709037 | #>                           V7 #>                  <character> #>   [1] TUPAC_0001:3:1:0:145.. #>   [2] TUPAC_0001:3:1:0:147.. #>   [3] TUPAC_0001:3:1:1:183.. #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 4 sequences from an unspecified genome; no seqlengths  gi |> select(contains(\"8\")) #> GInteractions object with 3 interactions and 1 metadata column: #>       seqnames1             ranges1     seqnames2             ranges2 | #>           <Rle>           <IRanges>         <Rle>           <IRanges> | #>   [1]      chr7 118965073-118965122 ---      chr7 118970080-118970129 | #>   [2]     chr11   46765607-46765656 ---     chr10   46769935-46769984 | #>   [3]     chr20   54704675-54704724 ---     chr20   54708988-54709037 | #>              V8 #>       <integer> #>   [1]        37 #>   [2]        37 #>   [3]        37 #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 4 sequences from an unspecified genome; no seqlengths  gi |> select(starts_with(\"V\")) #> GInteractions object with 3 interactions and 2 metadata columns: #>       seqnames1             ranges1     seqnames2             ranges2 | #>           <Rle>           <IRanges>         <Rle>           <IRanges> | #>   [1]      chr7 118965073-118965122 ---      chr7 118970080-118970129 | #>   [2]     chr11   46765607-46765656 ---     chr10   46769935-46769984 | #>   [3]     chr20   54704675-54704724 ---     chr20   54708988-54709037 | #>                           V7        V8 #>                  <character> <integer> #>   [1] TUPAC_0001:3:1:0:145..        37 #>   [2] TUPAC_0001:3:1:0:147..        37 #>   [3] TUPAC_0001:3:1:1:183..        37 #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 4 sequences from an unspecified genome; no seqlengths ## This does not restrict to `seqnames1` and `seqnames2` columns.  gi |> select(starts_with('seq'))  #> GInteractions object with 3 interactions and 0 metadata columns: #>       seqnames1             ranges1     seqnames2             ranges2 #>           <Rle>           <IRanges>         <Rle>           <IRanges> #>   [1]      chr7 118965073-118965122 ---      chr7 118970080-118970129 #>   [2]     chr11   46765607-46765656 ---     chr10   46769935-46769984 #>   [3]     chr20   54704675-54704724 ---     chr20   54708988-54709037 #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 4 sequences from an unspecified genome; no seqlengths"},{"path":"/articles/plyinteractions.html","id":"slicing-rows","dir":"Articles","previous_headings":"Quick start to using plyinteractions > Manipulating GInteractions","what":"Slicing rows","title":"plyinteractions","text":"","code":"gi |> slice(1, 2) #> GInteractions object with 2 interactions and 2 metadata columns: #>       seqnames1             ranges1     seqnames2             ranges2 | #>           <Rle>           <IRanges>         <Rle>           <IRanges> | #>   [1]      chr7 118965073-118965122 ---      chr7 118970080-118970129 | #>   [2]     chr11   46765607-46765656 ---     chr10   46769935-46769984 | #>                           V7        V8 #>                  <character> <integer> #>   [1] TUPAC_0001:3:1:0:145..        37 #>   [2] TUPAC_0001:3:1:0:147..        37 #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 4 sequences from an unspecified genome; no seqlengths gi |> slice(-3) #> GInteractions object with 2 interactions and 2 metadata columns: #>       seqnames1             ranges1     seqnames2             ranges2 | #>           <Rle>           <IRanges>         <Rle>           <IRanges> | #>   [1]      chr7 118965073-118965122 ---      chr7 118970080-118970129 | #>   [2]     chr11   46765607-46765656 ---     chr10   46769935-46769984 | #>                           V7        V8 #>                  <character> <integer> #>   [1] TUPAC_0001:3:1:0:145..        37 #>   [2] TUPAC_0001:3:1:0:147..        37 #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 4 sequences from an unspecified genome; no seqlengths"},{"path":"/articles/plyinteractions.html","id":"citing-plyinteractions","dir":"Articles","previous_headings":"","what":"Citing plyinteractions","title":"plyinteractions","text":"hope plyinteractions useful research. Please use following information cite package overall approach. Thank !","code":"## Citation info citation(\"plyinteractions\") #> To cite package 'plyinteractions' in publications use: #>  #>   Serizay J (2023). _plyinteractions: Extending tidy verbs to genomic #>   interactions_. R package version 0.98.0, #>   <https://github.com/js2264/plyinteractions>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {plyinteractions: Extending tidy verbs to genomic interactions}, #>     author = {Jacques Serizay}, #>     year = {2023}, #>     note = {R package version 0.98.0}, #>     url = {https://github.com/js2264/plyinteractions}, #>   }"},{"path":"/articles/plyinteractions.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"plyinteractions","text":"plyinteractions package introduces tidy methods GInteractions class defined InteractionSet package (Lun, Perry, Ing-Simmons, 2016). plyinteractions package follows tidy principles defined tabular data genomic ranges: dplyr (Wickham, François, Henry, Müller, Vaughan, 2023) rlang (Henry Wickham, 2023) plyranges (Lee, Stuart, Cook, Dianne, Lawrence, Michael, 2019) plyinteractions package (Serizay, 2023) written using following resources: R (R Core Team, 2023) devtools usethis Supporting documentation generated using following resources: BiocStyle (Oleś, 2023) knitr (Xie, 2023) RefManageR (McLean, 2017) rmarkdown (Allaire, Xie, Dervieux, McPherson, Luraschi, Ushey, Atkins, Wickham, Cheng, Chang, Iannone, 2023)","code":""},{"path":"/articles/plyinteractions.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"plyinteractions","text":"R session information:","code":"#> ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.3.1 (2023-06-16) #>  os       Ubuntu 22.04.3 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       UTC #>  date     2023-08-31 #>  pandoc   3.1.1 @ /usr/local/bin/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── #>  package              * version   date (UTC) lib source #>  abind                  1.4-5     2016-07-21 [1] CRAN (R 4.3.1) #>  backports              1.4.1     2021-12-13 [1] CRAN (R 4.3.1) #>  bibtex                 0.5.1     2023-01-26 [1] CRAN (R 4.3.1) #>  Biobase              * 2.61.0    2023-04-25 [1] Bioconductor #>  BiocGenerics         * 0.47.0    2023-04-25 [1] Bioconductor #>  BiocManager            1.30.22   2023-08-08 [1] CRAN (R 4.3.1) #>  BiocStyle            * 2.29.1    2023-07-19 [1] Bioconductor #>  bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.3.1) #>  bookdown               0.35      2023-08-09 [1] CRAN (R 4.3.1) #>  bslib                  0.5.1     2023-08-11 [2] CRAN (R 4.3.1) #>  cachem                 1.0.8     2023-05-01 [2] CRAN (R 4.3.1) #>  cli                    3.6.1     2023-03-23 [2] CRAN (R 4.3.1) #>  crayon                 1.5.2     2022-09-29 [2] CRAN (R 4.3.1) #>  DelayedArray           0.27.10   2023-07-28 [1] Bioconductor #>  desc                   1.4.2     2022-09-08 [2] CRAN (R 4.3.1) #>  digest                 0.6.33    2023-07-07 [2] CRAN (R 4.3.1) #>  dplyr                  1.1.2     2023-04-20 [1] CRAN (R 4.3.1) #>  evaluate               0.21      2023-05-05 [2] CRAN (R 4.3.1) #>  fansi                  1.0.4     2023-01-22 [2] CRAN (R 4.3.1) #>  fastmap                1.1.1     2023-02-24 [2] CRAN (R 4.3.1) #>  fs                     1.6.3     2023-07-20 [2] CRAN (R 4.3.1) #>  generics               0.1.3     2022-07-05 [1] CRAN (R 4.3.1) #>  GenomeInfoDb         * 1.37.3    2023-08-25 [1] Bioconductor #>  GenomeInfoDbData       1.2.10    2023-08-24 [1] Bioconductor #>  GenomicRanges        * 1.53.1    2023-05-04 [1] Bioconductor #>  glue                   1.6.2     2022-02-24 [2] CRAN (R 4.3.1) #>  htmltools              0.5.6     2023-08-10 [2] CRAN (R 4.3.1) #>  httr                   1.4.7     2023-08-15 [2] CRAN (R 4.3.1) #>  InteractionSet       * 1.29.1    2023-06-14 [1] Bioconductor #>  IRanges              * 2.35.2    2023-06-22 [1] Bioconductor #>  jquerylib              0.1.4     2021-04-26 [2] CRAN (R 4.3.1) #>  jsonlite               1.8.7     2023-06-29 [2] CRAN (R 4.3.1) #>  knitr                  1.43      2023-05-25 [2] CRAN (R 4.3.1) #>  lattice                0.21-8    2023-04-05 [3] CRAN (R 4.3.1) #>  lifecycle              1.0.3     2022-10-07 [2] CRAN (R 4.3.1) #>  lubridate              1.9.2     2023-02-10 [1] CRAN (R 4.3.1) #>  magrittr               2.0.3     2022-03-30 [2] CRAN (R 4.3.1) #>  Matrix                 1.6-1     2023-08-14 [2] CRAN (R 4.3.1) #>  MatrixGenerics       * 1.13.1    2023-07-25 [1] Bioconductor #>  matrixStats          * 1.0.0     2023-06-02 [1] CRAN (R 4.3.1) #>  memoise                2.0.1     2021-11-26 [2] CRAN (R 4.3.1) #>  pillar                 1.9.0     2023-03-22 [2] CRAN (R 4.3.1) #>  pkgconfig              2.0.3     2019-09-22 [2] CRAN (R 4.3.1) #>  pkgdown                2.0.7     2022-12-14 [1] CRAN (R 4.3.1) #>  plyinteractions      * 0.98.0    2023-08-31 [1] Bioconductor #>  plyr                   1.8.8     2022-11-11 [1] CRAN (R 4.3.1) #>  purrr                  1.0.2     2023-08-10 [2] CRAN (R 4.3.1) #>  R6                     2.5.1     2021-08-19 [2] CRAN (R 4.3.1) #>  ragg                   1.2.5     2023-01-12 [2] CRAN (R 4.3.1) #>  Rcpp                   1.0.11    2023-07-06 [2] CRAN (R 4.3.1) #>  RCurl                  1.98-1.12 2023-03-27 [1] CRAN (R 4.3.1) #>  RefManageR           * 1.4.0     2022-09-30 [1] CRAN (R 4.3.1) #>  rlang                  1.1.1     2023-04-28 [2] CRAN (R 4.3.1) #>  rmarkdown              2.24      2023-08-14 [1] CRAN (R 4.3.1) #>  rprojroot              2.0.3     2022-04-02 [2] CRAN (R 4.3.1) #>  S4Arrays               1.1.6     2023-08-30 [1] Bioconductor #>  S4Vectors            * 0.39.1    2023-05-03 [1] Bioconductor #>  sass                   0.4.7     2023-07-15 [2] CRAN (R 4.3.1) #>  sessioninfo          * 1.2.2     2021-12-06 [2] CRAN (R 4.3.1) #>  SparseArray            1.1.11    2023-07-25 [1] Bioconductor #>  stringi                1.7.12    2023-01-11 [2] CRAN (R 4.3.1) #>  stringr                1.5.0     2022-12-02 [2] CRAN (R 4.3.1) #>  SummarizedExperiment * 1.31.1    2023-05-01 [1] Bioconductor #>  systemfonts            1.0.4     2022-02-11 [2] CRAN (R 4.3.1) #>  textshaping            0.3.6     2021-10-13 [2] CRAN (R 4.3.1) #>  tibble                 3.2.1     2023-03-20 [2] CRAN (R 4.3.1) #>  tidyselect             1.2.0     2022-10-10 [1] CRAN (R 4.3.1) #>  timechange             0.2.0     2023-01-11 [1] CRAN (R 4.3.1) #>  utf8                   1.2.3     2023-01-31 [2] CRAN (R 4.3.1) #>  vctrs                  0.6.3     2023-06-14 [2] CRAN (R 4.3.1) #>  withr                  2.5.0     2022-03-03 [2] CRAN (R 4.3.1) #>  xfun                   0.40      2023-08-09 [2] CRAN (R 4.3.1) #>  xml2                   1.3.5     2023-07-06 [2] CRAN (R 4.3.1) #>  XVector                0.41.1    2023-05-03 [1] Bioconductor #>  yaml                   2.3.7     2023-01-23 [2] CRAN (R 4.3.1) #>  zlibbioc               1.47.0    2023-04-25 [1] Bioconductor #>  #>  [1] /__w/_temp/Library #>  [2] /usr/local/lib/R/site-library #>  [3] /usr/local/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":"/articles/plyinteractions.html","id":"bibliography","dir":"Articles","previous_headings":"","what":"Bibliography","title":"plyinteractions","text":"[1] J. Allaire, Y. Xie, C. Dervieux, et al. rmarkdown: Dynamic Documents R. R package version 2.24. 2023. URL: https://github.com/rstudio/rmarkdown. [2] L. Henry H. Wickham. rlang: Functions Base Types Core R ‘Tidyverse’ Features. R package version 1.1.1. 2023. URL: https://CRAN.R-project.org/package=rlang. [3] Lee, Stuart, Cook, et al. “plyranges: grammar genomic data transformation”. : Genome Biol. 20.1 (2019), p. 4. URL: http://dx.doi.org/10.1186/s13059-018-1597-8. [4] . T. L. Lun, M. Perry, E. Ing-Simmons. “Infrastructure genomic interactions: Bioconductor classes Hi-C, ChIA-PET related experiments”. : F1000Res. 5 (2016), p. 950. [5] M. W. McLean. “RefManageR: Import Manage BibTeX BibLaTeX References R”. : Journal Open Source Software (2017). DOI: 10.21105/joss.00338. [6] . Oleś. BiocStyle: Standard styles vignettes Bioconductor documents. R package version 2.29.1. 2023. DOI: 10.18129/B9.bioc.BiocStyle. URL: https://bioconductor.org/packages/BiocStyle. [7] R Core Team. R: Language Environment Statistical Computing. R Foundation Statistical Computing. Vienna, Austria, 2023. URL: https://www.R-project.org/. [8] J. Serizay. plyinteractions: Extending tidy verbs genomic interactions. R package version 0.98.0. 2023. URL: https://github.com/js2264/plyinteractions. [9] H. Wickham, R. François, L. Henry, et al. dplyr: Grammar Data Manipulation. R package version 1.1.2. 2023. URL: https://CRAN.R-project.org/package=dplyr. [10] Y. Xie. knitr: General-Purpose Package Dynamic Report Generation R. R package version 1.43. 2023. URL: https://yihui.org/knitr/.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jacques Serizay. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Serizay J (2023). plyinteractions: Extending tidy verbs genomic interactions. R package version 0.98.0, https://github.com/js2264/plyinteractions.","code":"@Manual{,   title = {plyinteractions: Extending tidy verbs to genomic interactions},   author = {Jacques Serizay},   year = {2023},   note = {R package version 0.98.0},   url = {https://github.com/js2264/plyinteractions}, }"},{"path":"/index.html","id":"plyinteractions","dir":"","previous_headings":"","what":"Extending tidy verbs to genomic interactions","title":"Extending tidy verbs to genomic interactions","text":"plyinteractions provides consistent interface importing wrangling genomic interactions pairs bedpe files GInteractions R. package follows grammar tidy genomic data transformation defined plyranges, based dplyr rlang. operations currently available GInteractions objects : Modify genomic interactions mutate; Subset genomic interactions filter using <data-masking> logical expressions; Pick columns associated metadata select using <tidy-select> arguments; Subset using indices slice.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extending tidy verbs to genomic interactions","text":"plyinteractions can currently installed GitHub:","code":"BiocManager::install(\"tidyomics/plyinteractions\")"},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Extending tidy verbs to genomic interactions","text":"Please note project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Extending tidy verbs to genomic interactions","text":"package largely inspired plyranges tidyverse: Lee, Stuart, Dianne Cook, Michael Lawrence. 2019. “Plyranges: Grammar Genomic Data Transformation.” Genome Biology 20 (1): 4. https://doi.org/10.1186/s13059-018-1597-8. Wickham H, François R, Henry L, Müller K, Vaughan D (2023). dplyr: Grammar Data Manipulation. R package version 1.1.2, https://CRAN.R-project.org/package=dplyr. Henry L, Wickham H (2023). rlang: Functions Base Types Core R ‘Tidyverse’ Features. R package version 1.1.1, https://CRAN.R-project.org/package=rlang.","code":""},{"path":"/reference/ginteractions-arrange.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange a GInteractions by a column — arrange.GInteractions","title":"Arrange a GInteractions by a column — arrange.GInteractions","text":"Arrange GInteractions column","code":""},{"path":"/reference/ginteractions-arrange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange a GInteractions by a column — arrange.GInteractions","text":"","code":"# S3 method for GInteractions arrange(.data, ...)"},{"path":"/reference/ginteractions-arrange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange a GInteractions by a column — arrange.GInteractions","text":".data GInteractions object ... Variables, functions variables. Use dplyr::desc() sort variable descending order.","code":""},{"path":"/reference/ginteractions-arrange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange a GInteractions by a column — arrange.GInteractions","text":"GInteractions object.","code":""},{"path":"/reference/ginteractions-arrange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange a GInteractions by a column — arrange.GInteractions","text":"","code":"gi <- read.table(text = \" chr1 1 10 chr1 1 10 chr1 2 10 chr2 1 10 chr3 3 10 chr3 1 10 chr4 4 10 chr4 1 10 chr5 5 10 chr5 1 10\", col.names = c(\"seqnames1\", \"start1\", \"end1\", \"seqnames2\", \"start2\", \"end2\")) |>    as_ginteractions() |>    mutate(cis = seqnames1 == seqnames2, score = runif(5)*100, gc = runif(5)) gi #> GInteractions object with 5 interactions and 3 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 |   cis     score        gc #>           <Rle> <IRanges>         <Rle> <IRanges> | <Rle> <numeric> <numeric> #>   [1]      chr1      1-10 ---      chr1      1-10 |  TRUE   80.5987 0.0626132 #>   [2]      chr1      2-10 ---      chr2      1-10 | FALSE   25.7645 0.6152458 #>   [3]      chr3      3-10 ---      chr3      1-10 |  TRUE   56.4629 0.2739113 #>   [4]      chr4      4-10 ---      chr4      1-10 |  TRUE   33.4386 0.5514316 #>   [5]      chr5      5-10 ---      chr5      1-10 |  TRUE   28.3150 0.3661049 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths  #################################################################### # 1. Arrange GInteractions by a numerical column ####################################################################  gi |> arrange(gc) #> GInteractions object with 5 interactions and 3 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 |   cis     score        gc #>           <Rle> <IRanges>         <Rle> <IRanges> | <Rle> <numeric> <numeric> #>   [1]      chr1      1-10 ---      chr1      1-10 |  TRUE   80.5987 0.0626132 #>   [2]      chr3      3-10 ---      chr3      1-10 |  TRUE   56.4629 0.2739113 #>   [3]      chr5      5-10 ---      chr5      1-10 |  TRUE   28.3150 0.3661049 #>   [4]      chr4      4-10 ---      chr4      1-10 |  TRUE   33.4386 0.5514316 #>   [5]      chr1      2-10 ---      chr2      1-10 | FALSE   25.7645 0.6152458 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths  #################################################################### # 2. Arrange GInteractions by a logical column ####################################################################  gi |> arrange(cis) #> GInteractions object with 5 interactions and 3 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 |   cis     score        gc #>           <Rle> <IRanges>         <Rle> <IRanges> | <Rle> <numeric> <numeric> #>   [1]      chr1      2-10 ---      chr2      1-10 | FALSE   25.7645 0.6152458 #>   [2]      chr1      1-10 ---      chr1      1-10 |  TRUE   80.5987 0.0626132 #>   [3]      chr3      3-10 ---      chr3      1-10 |  TRUE   56.4629 0.2739113 #>   [4]      chr4      4-10 ---      chr4      1-10 |  TRUE   33.4386 0.5514316 #>   [5]      chr5      5-10 ---      chr5      1-10 |  TRUE   28.3150 0.3661049 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths  #################################################################### # 3. Arrange GInteractions by a factor ####################################################################  gi |>    mutate(rep = factor(c(\"rep1\", \"rep2\", \"rep1\", \"rep2\", \"rep1\"))) |>    arrange(rep) #> GInteractions object with 5 interactions and 4 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 |   cis     score        gc #>           <Rle> <IRanges>         <Rle> <IRanges> | <Rle> <numeric> <numeric> #>   [1]      chr1      1-10 ---      chr1      1-10 |  TRUE   80.5987 0.0626132 #>   [2]      chr3      3-10 ---      chr3      1-10 |  TRUE   56.4629 0.2739113 #>   [3]      chr5      5-10 ---      chr5      1-10 |  TRUE   28.3150 0.3661049 #>   [4]      chr1      2-10 ---      chr2      1-10 | FALSE   25.7645 0.6152458 #>   [5]      chr4      4-10 ---      chr4      1-10 |  TRUE   33.4386 0.5514316 #>            rep #>       <factor> #>   [1]     rep1 #>   [2]     rep1 #>   [3]     rep1 #>   [4]     rep2 #>   [5]     rep2 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths  #################################################################### # 4. Combine sorting variables ####################################################################  gi |>    mutate(rep = factor(c(\"rep1\", \"rep2\", \"rep1\", \"rep2\", \"rep1\"))) |>    arrange(dplyr::desc(rep), score) #> GInteractions object with 5 interactions and 4 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 |   cis     score        gc #>           <Rle> <IRanges>         <Rle> <IRanges> | <Rle> <numeric> <numeric> #>   [1]      chr1      2-10 ---      chr2      1-10 | FALSE   25.7645 0.6152458 #>   [2]      chr4      4-10 ---      chr4      1-10 |  TRUE   33.4386 0.5514316 #>   [3]      chr5      5-10 ---      chr5      1-10 |  TRUE   28.3150 0.3661049 #>   [4]      chr3      3-10 ---      chr3      1-10 |  TRUE   56.4629 0.2739113 #>   [5]      chr1      1-10 ---      chr1      1-10 |  TRUE   80.5987 0.0626132 #>            rep #>       <factor> #>   [1]     rep2 #>   [2]     rep2 #>   [3]     rep1 #>   [4]     rep1 #>   [5]     rep1 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths"},{"path":"/reference/ginteractions-construct.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a GInteractions object from a tibble, DataFrame or data.frame — as_ginteractions","title":"Construct a GInteractions object from a tibble, DataFrame or data.frame — as_ginteractions","text":"as_ginteractions function looks column names .data called seqnames{1,2}, start{1,2}, end{1,2}, strand{1,2} order construct GInteractions object. default columns .data placed mcols (metadata columns) slot returned object.","code":""},{"path":"/reference/ginteractions-construct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a GInteractions object from a tibble, DataFrame or data.frame — as_ginteractions","text":"","code":"as_ginteractions(   .data,   ...,   keep.extra.columns = TRUE,   starts.in.df.are.0based = FALSE )"},{"path":"/reference/ginteractions-construct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a GInteractions object from a tibble, DataFrame or data.frame — as_ginteractions","text":".data data.frame(), DataFrame() tibble() construct GInteractions object . ... Optional named arguments specifying columns .data containin core components GInteractions object. keep.extra.columns TRUE FALSE (default). TRUE, columns df used form genomic ranges returned GRanges object returned metadata columns object. Otherwise, ignored. starts..df..0based TRUE FALSE (default). TRUE, start positions genomic ranges df considered 0-based converted 1-based returned GRanges object.","code":""},{"path":"/reference/ginteractions-construct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a GInteractions object from a tibble, DataFrame or data.frame — as_ginteractions","text":"GInteractions object.","code":""},{"path":[]},{"path":"/reference/ginteractions-construct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a GInteractions object from a tibble, DataFrame or data.frame — as_ginteractions","text":"","code":"#################################################################### # 1. GInteractions from bedpe files imported into a data.frame ####################################################################  bedpe <- read.table(text = \" chr1 100 200 chr1 5000 5100 bedpe_example1 30 + - chr1 1000 5000 chr1 3000 3800 bedpe_example2 100 + -\", col.names = c(   \"chrom1\", \"start1\", \"end1\",    \"chrom2\", \"start2\", \"end2\", \"name\", \"score\", \"strand1\", \"strand2\")) bedpe |>    as_ginteractions(seqnames1 = chrom1, seqnames2 = chrom2) #> GInteractions object with 2 interactions and 2 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 |           name     score #>           <Rle> <IRanges>         <Rle> <IRanges> |    <character> <integer> #>   [1]      chr1   100-200 ---      chr1 5000-5100 | bedpe_example1        30 #>   [2]      chr1 1000-5000 ---      chr1 3000-3800 | bedpe_example2       100 #>   ------- #>   regions: 4 ranges and 0 metadata columns #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  #################################################################### # 2. GInteractions from standard pairs files imported into a data.frame ####################################################################  # Note how the pairs are 0-based and no \"end\" field is provided  # (the standard pairs file format does not have \"end\" fields) # We can provide width1 and width2 to fix this problem.   pairs <- read.table(text = \" EAS139:136:FC706VJ:2:2104:23462:197393 chr1 10000 chr1 20000 + + EAS139:136:FC706VJ:2:8762:23765:128766 chr1 50000 chr1 70000 + + EAS139:136:FC706VJ:2:2342:15343:9863 chr1 60000 chr2 10000 + + EAS139:136:FC706VJ:2:1286:25:275154 chr1 30000 chr3 40000 + -\",  col.names = c(\"readID\", \"chr1\", \"pos1\", \"chr2\", \"pos2\", \"strand1\", \"strand2\")) pairs |>    as_ginteractions(     seqnames1 = chr1, start1 = pos1, width1 = 1000,      seqnames2 = chr2, start2 = pos2, width2 = 1000,      starts.in.df.are.0based = TRUE   ) #> GInteractions object with 4 interactions and 1 metadata column: #>       seqnames1     ranges1     seqnames2     ranges2 |                 readID #>           <Rle>   <IRanges>         <Rle>   <IRanges> |            <character> #>   [1]      chr1 10001-11000 ---      chr1 20001-21000 | EAS139:136:FC706VJ:2.. #>   [2]      chr1 50001-51000 ---      chr1 70001-71000 | EAS139:136:FC706VJ:2.. #>   [3]      chr1 60001-61000 ---      chr2 10001-11000 | EAS139:136:FC706VJ:2.. #>   [4]      chr1 30001-31000 ---      chr3 40001-41000 | EAS139:136:FC706VJ:2.. #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 3 sequences from an unspecified genome; no seqlengths  #################################################################### # 3. GInteractions from data.frame with extra fields ####################################################################  df <- read.table(text = \" chr1 100 200 chr1 5000 5100 chr1 1000 5000 chr1 3000 3800\", col.names = c(\"chr1\", \"start1\", \"end1\", \"chr2\", \"start2\", \"end2\")) df |>    as_ginteractions(seqnames1 = chr1, seqnames2 = chr2) #> GInteractions object with 2 interactions and 0 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 #>           <Rle> <IRanges>         <Rle> <IRanges> #>   [1]      chr1   100-200 ---      chr1 5000-5100 #>   [2]      chr1 1000-5000 ---      chr1 3000-3800 #>   ------- #>   regions: 4 ranges and 0 metadata columns #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  df <- read.table(text = \" chr1 100 200 chr1 5000 5100 chr1 1000 5000 chr1 3000 3800\", col.names = c(\"chr1\", \"start1\", \"end1\", \"chr2\", \"start2\", \"end2\")) df |>    as_ginteractions(seqnames1 = chr1, seqnames2 = chr2, strand1 = '+', strand2 = '-') #> GInteractions object with 2 interactions and 0 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 #>           <Rle> <IRanges>         <Rle> <IRanges> #>   [1]      chr1   100-200 ---      chr1 5000-5100 #>   [2]      chr1 1000-5000 ---      chr1 3000-3800 #>   ------- #>   regions: 4 ranges and 0 metadata columns #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  data.frame(type = \"cis\", count = 3) |>    as_ginteractions(     seqnames1 = 'chr1', start1 = 1, end1 = 10,     seqnames2 = 'chr1', start2 = 40, end2 = 50   ) #> GInteractions object with 1 interaction and 2 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 |        type     count #>           <Rle> <IRanges>         <Rle> <IRanges> | <character> <numeric> #>   [1]      chr1      1-10 ---      chr1     40-50 |         cis         3 #>   ------- #>   regions: 2 ranges and 0 metadata columns #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  #################################################################### # 4. GInteractions from a real like pairs files ####################################################################  pairsf <- HiContactsData::HiContactsData('yeast_wt', 'pairs.gz') #> see ?HiContactsData and browseVignettes('HiContactsData') for documentation #> loading from cache pairs <- read.table(pairsf, comment.char = '#', header = FALSE) head(pairs) #>                                           V1 V2  V3 V4     V5 V6 V7   V8   V9 #> 1  NS500150:527:HHGYNBGXF:3:21611:19085:3986 II 105 II  48548  +  - 1358 1681 #> 2  NS500150:527:HHGYNBGXF:4:13604:19734:2406 II 113 II  45003  -  + 1358 1658 #> 3 NS500150:527:HHGYNBGXF:2:11108:25178:11036 II 119 II 687251  -  + 1358 5550 #> 4   NS500150:527:HHGYNBGXF:1:22301:8468:1586 II 160 II  26124  +  - 1358 1510 #> 5  NS500150:527:HHGYNBGXF:4:23606:24037:2076 II 169 II  39052  +  + 1358 1613 #> 6  NS500150:527:HHGYNBGXF:1:12110:9220:19806 II 177 II  10285  +  - 1358 1416 pairs |>    as_ginteractions(     seqnames1 = V2, start1 = V3, width1 = 1, strand1 = V6,      seqnames2 = V4, start2 = V5, width2 = 1, strand2 = V7,     starts.in.df.are.0based = TRUE   ) #> GInteractions object with 471364 interactions and 3 metadata columns: #>            seqnames1   ranges1     seqnames2   ranges2 |                     V1 #>                <Rle> <IRanges>         <Rle> <IRanges> |            <character> #>        [1]        II       106 ---        II     48549 | NS500150:527:HHGYNBG.. #>        [2]        II       114 ---        II     45004 | NS500150:527:HHGYNBG.. #>        [3]        II       120 ---        II    687252 | NS500150:527:HHGYNBG.. #>        [4]        II       161 ---        II     26125 | NS500150:527:HHGYNBG.. #>        [5]        II       170 ---        II     39053 | NS500150:527:HHGYNBG.. #>        ...       ...       ... ...       ...       ... .                    ... #>   [471360]        II    808606 ---        II    809684 | NS500150:527:HHGYNBG.. #>   [471361]        II    808610 ---        II    809918 | NS500150:527:HHGYNBG.. #>   [471362]        II    808618 ---        II    809507 | NS500150:527:HHGYNBG.. #>   [471363]        II    809448 ---        II    809686 | NS500150:527:HHGYNBG.. #>   [471364]        II    809473 ---        II    809676 | NS500150:527:HHGYNBG.. #>                   V8        V9 #>            <integer> <integer> #>        [1]      1358      1681 #>        [2]      1358      1658 #>        [3]      1358      5550 #>        [4]      1358      1510 #>        [5]      1358      1613 #>        ...       ...       ... #>   [471360]      6316      6320 #>   [471361]      6316      6324 #>   [471362]      6316      6319 #>   [471363]      6319      6321 #>   [471364]      6319      6320 #>   ------- #>   regions: 549331 ranges and 0 metadata columns #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"/reference/ginteractions-filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a GInteractions with tidyverse-like filter — filter.GInteractions","title":"Subset a GInteractions with tidyverse-like filter — filter.GInteractions","text":"Subset GInteractions tidyverse-like filter","code":""},{"path":"/reference/ginteractions-filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a GInteractions with tidyverse-like filter — filter.GInteractions","text":"","code":"# S3 method for GInteractions filter(.data, ...)"},{"path":"/reference/ginteractions-filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a GInteractions with tidyverse-like filter — filter.GInteractions","text":".data GInteractions object ... Expressions return logical value, defined terms variables .data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept.","code":""},{"path":"/reference/ginteractions-filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a GInteractions with tidyverse-like filter — filter.GInteractions","text":"GInteractions object.","code":""},{"path":"/reference/ginteractions-filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a GInteractions with tidyverse-like filter — filter.GInteractions","text":"","code":"gi <- read.table(text = \" chr1 1 10 chr1 1 10 chr1 2 10 chr2 1 10 chr3 3 10 chr3 1 10 chr4 4 10 chr4 1 10 chr5 5 10 chr5 1 10\", col.names = c(\"seqnames1\", \"start1\", \"end1\", \"seqnames2\", \"start2\", \"end2\")) |>    as_ginteractions() |>    mutate(cis = seqnames1 == seqnames2, score = runif(5)*100, gc = runif(5)) gi #> GInteractions object with 5 interactions and 3 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 |   cis     score        gc #>           <Rle> <IRanges>         <Rle> <IRanges> | <Rle> <numeric> <numeric> #>   [1]      chr1      1-10 ---      chr1      1-10 |  TRUE  22.59885  0.674231 #>   [2]      chr1      2-10 ---      chr2      1-10 | FALSE  96.43098  0.841392 #>   [3]      chr3      3-10 ---      chr3      1-10 |  TRUE  22.72978  0.850366 #>   [4]      chr4      4-10 ---      chr4      1-10 |  TRUE  50.90976  0.941714 #>   [5]      chr5      5-10 ---      chr5      1-10 |  TRUE   6.78865  0.069788 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths  #################################################################### # 1. Filter metadata columns from GInteractions by condition ####################################################################  gi |> filter(gc > 0.1) #> GInteractions object with 4 interactions and 3 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 |   cis     score        gc #>           <Rle> <IRanges>         <Rle> <IRanges> | <Rle> <numeric> <numeric> #>   [1]      chr1      1-10 ---      chr1      1-10 |  TRUE   22.5989  0.674231 #>   [2]      chr1      2-10 ---      chr2      1-10 | FALSE   96.4310  0.841392 #>   [3]      chr3      3-10 ---      chr3      1-10 |  TRUE   22.7298  0.850366 #>   [4]      chr4      4-10 ---      chr4      1-10 |  TRUE   50.9098  0.941714 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths gi |> filter(gc > 0.1, score > 50) #> GInteractions object with 2 interactions and 3 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 |   cis     score        gc #>           <Rle> <IRanges>         <Rle> <IRanges> | <Rle> <numeric> <numeric> #>   [1]      chr1      2-10 ---      chr2      1-10 | FALSE   96.4310  0.841392 #>   [2]      chr4      4-10 ---      chr4      1-10 |  TRUE   50.9098  0.941714 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths gi |> filter(cis) #> GInteractions object with 4 interactions and 3 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 |   cis     score        gc #>           <Rle> <IRanges>         <Rle> <IRanges> | <Rle> <numeric> <numeric> #>   [1]      chr1      1-10 ---      chr1      1-10 |  TRUE  22.59885  0.674231 #>   [2]      chr3      3-10 ---      chr3      1-10 |  TRUE  22.72978  0.850366 #>   [3]      chr4      4-10 ---      chr4      1-10 |  TRUE  50.90976  0.941714 #>   [4]      chr5      5-10 ---      chr5      1-10 |  TRUE   6.78865  0.069788 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths  #################################################################### # 2. On-the-fly calculations ####################################################################  gi #> GInteractions object with 5 interactions and 3 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 |   cis     score        gc #>           <Rle> <IRanges>         <Rle> <IRanges> | <Rle> <numeric> <numeric> #>   [1]      chr1      1-10 ---      chr1      1-10 |  TRUE  22.59885  0.674231 #>   [2]      chr1      2-10 ---      chr2      1-10 | FALSE  96.43098  0.841392 #>   [3]      chr3      3-10 ---      chr3      1-10 |  TRUE  22.72978  0.850366 #>   [4]      chr4      4-10 ---      chr4      1-10 |  TRUE  50.90976  0.941714 #>   [5]      chr5      5-10 ---      chr5      1-10 |  TRUE   6.78865  0.069788 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths gi |> filter(start1 >= start2 + 3) #> GInteractions object with 2 interactions and 3 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 |   cis     score        gc #>           <Rle> <IRanges>         <Rle> <IRanges> | <Rle> <numeric> <numeric> #>   [1]      chr4      4-10 ---      chr4      1-10 |  TRUE  50.90976  0.941714 #>   [2]      chr5      5-10 ---      chr5      1-10 |  TRUE   6.78865  0.069788 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths gi |> filter(score * gc > score * 0.5) #> GInteractions object with 4 interactions and 3 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 |   cis     score        gc #>           <Rle> <IRanges>         <Rle> <IRanges> | <Rle> <numeric> <numeric> #>   [1]      chr1      1-10 ---      chr1      1-10 |  TRUE   22.5989  0.674231 #>   [2]      chr1      2-10 ---      chr2      1-10 | FALSE   96.4310  0.841392 #>   [3]      chr3      3-10 ---      chr3      1-10 |  TRUE   22.7298  0.850366 #>   [4]      chr4      4-10 ---      chr4      1-10 |  TRUE   50.9098  0.941714 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths"},{"path":"/reference/ginteractions-getters.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal GInteractions getters — ginteractions-getters","title":"Internal GInteractions getters — ginteractions-getters","text":"Internal GInteractions getters","code":""},{"path":"/reference/ginteractions-getters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal GInteractions getters — ginteractions-getters","text":"","code":"seqnames1(x)  seqnames2(x)  start1(x)  start2(x)  end1(x)  end2(x)  width1(x)  width2(x)  strand1(x)  strand2(x)  # S4 method for GInteractions seqnames1(x)  # S4 method for GInteractions seqnames2(x)  # S4 method for GInteractions start1(x)  # S4 method for GInteractions start2(x)  # S4 method for GInteractions end1(x)  # S4 method for GInteractions end2(x)  # S4 method for GInteractions width1(x)  # S4 method for GInteractions width2(x)  # S4 method for GInteractions strand1(x)  # S4 method for GInteractions strand2(x)"},{"path":"/reference/ginteractions-getters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal GInteractions getters — ginteractions-getters","text":"x GInteractions object","code":""},{"path":"/reference/ginteractions-getters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal GInteractions getters — ginteractions-getters","text":"One core GInteractions fields (e.g. seqnames1, start1, ...)","code":""},{"path":"/reference/ginteractions-mutate.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutate columns from a GInteractions object — ginteractions-mutate","title":"Mutate columns from a GInteractions object — ginteractions-mutate","text":"Mutate columns GInteractions object","code":""},{"path":"/reference/ginteractions-mutate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutate columns from a GInteractions object — ginteractions-mutate","text":"","code":"# S3 method for GInteractions mutate(.data, ...)"},{"path":"/reference/ginteractions-mutate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutate columns from a GInteractions object — ginteractions-mutate","text":".data GInteractions object ... Optional named arguments specifying columns .data create/modify.","code":""},{"path":"/reference/ginteractions-mutate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutate columns from a GInteractions object — ginteractions-mutate","text":"GInteractions object.","code":""},{"path":"/reference/ginteractions-mutate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutate columns from a GInteractions object — ginteractions-mutate","text":"","code":"gi <- read.table(text = \" chr1 10 20 chr1 50 51 chr1 10 50 chr2 30 40\", col.names = c(\"chr1\", \"start1\", \"end1\", \"chr2\", \"start2\", \"end2\")) |>    as_ginteractions(seqnames1 = chr1, seqnames2 = chr2)    #################################################################### # 1. Add metadata columns to a GInteractions object ####################################################################  gi |>    mutate(type = c('cis', 'trans'), score = runif(2)) |>    mutate(type2 = type) #> GInteractions object with 2 interactions and 3 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 |        type     score #>           <Rle> <IRanges>         <Rle> <IRanges> | <character> <numeric> #>   [1]      chr1     10-20 ---      chr1     50-51 |         cis  0.682946 #>   [2]      chr1     10-50 ---      chr2     30-40 |       trans  0.539668 #>             type2 #>       <character> #>   [1]         cis #>   [2]       trans #>   ------- #>   regions: 4 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  #################################################################### # 2. More complex, nested or inplace changes ####################################################################  gi |>    mutate(type = c('cis', 'trans'), score = runif(2)) |>    mutate(type2 = type) |>    mutate(count = c(1, 2), score = count * 2, new_col = paste0(type2, score)) #> GInteractions object with 2 interactions and 5 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 |        type     score #>           <Rle> <IRanges>         <Rle> <IRanges> | <character> <numeric> #>   [1]      chr1     10-20 ---      chr1     50-51 |         cis         2 #>   [2]      chr1     10-50 ---      chr2     30-40 |       trans         4 #>             type2     count     new_col #>       <character> <numeric> <character> #>   [1]         cis         1        cis2 #>   [2]       trans         2      trans4 #>   ------- #>   regions: 4 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  #################################################################### # 3. Core GInteractions columns can also be modified ####################################################################  gi |>    mutate(start1 = 1, end1 = 10, width2 = 30, strand2 = c('-', '+')) #> GInteractions object with 2 interactions and 0 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 #>           <Rle> <IRanges>         <Rle> <IRanges> #>   [1]      chr1      1-10 ---      chr1     50-79 #>   [2]      chr1      1-10 ---      chr2     30-59 #>   ------- #>   regions: 3 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  # Note how the core columns are modified sequentially    # Note how the core columns are modified sequentially   gi |>    mutate(start1 = 1, end1 = 10) #> GInteractions object with 2 interactions and 0 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 #>           <Rle> <IRanges>         <Rle> <IRanges> #>   [1]      chr1      1-10 ---      chr1     50-51 #>   [2]      chr1      1-10 ---      chr2     30-40 #>   ------- #>   regions: 3 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths gi |>    mutate(start1 = 1, end1 = 10, width1 = 50) #> GInteractions object with 2 interactions and 0 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 #>           <Rle> <IRanges>         <Rle> <IRanges> #>   [1]      chr1      1-50 ---      chr1     50-51 #>   [2]      chr1      1-50 ---      chr2     30-40 #>   ------- #>   regions: 3 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  #################################################################### # 4. Evaluating core GInteractions columns ####################################################################  gi |>    mutate(     score = runif(2),      cis = seqnames1 == seqnames2,      distance = ifelse(cis, start2 - end1, NA)   ) #> GInteractions object with 2 interactions and 3 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 |     score   cis  distance #>           <Rle> <IRanges>         <Rle> <IRanges> | <numeric> <Rle> <integer> #>   [1]      chr1     10-20 ---      chr1     50-51 |  0.578097  TRUE        30 #>   [2]      chr1     10-50 ---      chr2     30-40 |  0.833797 FALSE      <NA> #>   ------- #>   regions: 4 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/reference/ginteractions-select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select columns within GInteractions metadata columns — select.GInteractions","title":"Select columns within GInteractions metadata columns — select.GInteractions","text":"Select columns within GInteractions metadata columns","code":""},{"path":"/reference/ginteractions-select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select columns within GInteractions metadata columns — select.GInteractions","text":"","code":"# S3 method for GInteractions select(.data, ...)"},{"path":"/reference/ginteractions-select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select columns within GInteractions metadata columns — select.GInteractions","text":".data GInteractions object ... Integer indicating rows keep.","code":""},{"path":"/reference/ginteractions-select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select columns within GInteractions metadata columns — select.GInteractions","text":"GInteractions object.","code":""},{"path":"/reference/ginteractions-select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select columns within GInteractions metadata columns — select.GInteractions","text":"","code":"gi <- read.table(text = \" chr1 1 10 chr1 1 10 chr2 1 10 chr2 1 10 chr3 1 10 chr3 1 10 chr4 1 10 chr4 1 10 chr5 1 10 chr5 1 10\", col.names = c(\"seqnames1\", \"start1\", \"end1\", \"seqnames2\", \"start2\", \"end2\")) |>    as_ginteractions() |>    mutate(score = runif(5)*100, cis = TRUE, gc = runif(5))    #################################################################### # 1. Select metadata columns from GInteractions by index ####################################################################  gi |> select(2, 1) #> GInteractions object with 5 interactions and 2 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 |       cis     score #>           <Rle> <IRanges>         <Rle> <IRanges> | <logical> <numeric> #>   [1]      chr1      1-10 ---      chr1      1-10 |      TRUE   45.0221 #>   [2]      chr2      1-10 ---      chr2      1-10 |      TRUE   52.6298 #>   [3]      chr3      1-10 ---      chr3      1-10 |      TRUE   60.9243 #>   [4]      chr4      1-10 ---      chr4      1-10 |      TRUE   47.2071 #>   [5]      chr5      1-10 ---      chr5      1-10 |      TRUE   27.7140 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths gi |> select(-3) #> GInteractions object with 5 interactions and 2 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 |     score       cis #>           <Rle> <IRanges>         <Rle> <IRanges> | <numeric> <logical> #>   [1]      chr1      1-10 ---      chr1      1-10 |   45.0221      TRUE #>   [2]      chr2      1-10 ---      chr2      1-10 |   52.6298      TRUE #>   [3]      chr3      1-10 ---      chr3      1-10 |   60.9243      TRUE #>   [4]      chr4      1-10 ---      chr4      1-10 |   47.2071      TRUE #>   [5]      chr5      1-10 ---      chr5      1-10 |   27.7140      TRUE #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths  #################################################################### # 2. Select metadata columns from GInteractions by name ####################################################################  gi |> select(gc, score) #> GInteractions object with 5 interactions and 2 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 |        gc     score #>           <Rle> <IRanges>         <Rle> <IRanges> | <numeric> <numeric> #>   [1]      chr1      1-10 ---      chr1      1-10 |  0.426540   45.0221 #>   [2]      chr2      1-10 ---      chr2      1-10 |  0.212898   52.6298 #>   [3]      chr3      1-10 ---      chr3      1-10 |  0.976975   60.9243 #>   [4]      chr4      1-10 ---      chr4      1-10 |  0.753766   47.2071 #>   [5]      chr5      1-10 ---      chr5      1-10 |  0.132062   27.7140 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths  #################################################################### # 3. Select metadata columns from GInteractions with <tidy-select> ####################################################################  gi |> select(contains('s')) #> GInteractions object with 5 interactions and 2 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 |     score       cis #>           <Rle> <IRanges>         <Rle> <IRanges> | <numeric> <logical> #>   [1]      chr1      1-10 ---      chr1      1-10 |   45.0221      TRUE #>   [2]      chr2      1-10 ---      chr2      1-10 |   52.6298      TRUE #>   [3]      chr3      1-10 ---      chr3      1-10 |   60.9243      TRUE #>   [4]      chr4      1-10 ---      chr4      1-10 |   47.2071      TRUE #>   [5]      chr5      1-10 ---      chr5      1-10 |   27.7140      TRUE #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths gi |> select(matches('^s')) #> GInteractions object with 5 interactions and 1 metadata column: #>       seqnames1   ranges1     seqnames2   ranges2 |     score #>           <Rle> <IRanges>         <Rle> <IRanges> | <numeric> #>   [1]      chr1      1-10 ---      chr1      1-10 |   45.0221 #>   [2]      chr2      1-10 ---      chr2      1-10 |   52.6298 #>   [3]      chr3      1-10 ---      chr3      1-10 |   60.9243 #>   [4]      chr4      1-10 ---      chr4      1-10 |   47.2071 #>   [5]      chr5      1-10 ---      chr5      1-10 |   27.7140 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths"},{"path":"/reference/ginteractions-setters.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal GInteractions setters — ginteractions-setters","title":"Internal GInteractions setters — ginteractions-setters","text":"Internal GInteractions setters","code":""},{"path":"/reference/ginteractions-setters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal GInteractions setters — ginteractions-setters","text":"","code":"# S4 method for GInteractions first(x) <- value  # S4 method for GInteractions second(x) <- value  set_seqnames1(x, value)  set_seqnames2(x, value)  set_start1(x, value)  set_start2(x, value)  set_end1(x, value)  set_end2(x, value)  set_width1(x, value)  set_width2(x, value)  set_strand1(x, value)  set_strand2(x, value)  # S4 method for GInteractions,factor set_seqnames1(x, value)  # S4 method for GInteractions,factor set_seqnames2(x, value)  # S4 method for GInteractions,numeric set_start1(x, value)  # S4 method for GInteractions,numeric set_start2(x, value)  # S4 method for GInteractions,numeric set_end1(x, value)  # S4 method for GInteractions,numeric set_end2(x, value)  # S4 method for GInteractions,numeric set_width1(x, value)  # S4 method for GInteractions,numeric set_width2(x, value)  # S4 method for GInteractions,character set_strand1(x, value)  # S4 method for GInteractions,character set_strand2(x, value)"},{"path":"/reference/ginteractions-setters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal GInteractions setters — ginteractions-setters","text":"x GInteractions object value value passed corresponding field","code":""},{"path":"/reference/ginteractions-setters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal GInteractions setters — ginteractions-setters","text":"modified GInteractions","code":""},{"path":"/reference/ginteractions-slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Slice a GInteractions rows by their index — slice.GInteractions","title":"Slice a GInteractions rows by their index — slice.GInteractions","text":"Slice GInteractions rows index","code":""},{"path":"/reference/ginteractions-slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slice a GInteractions rows by their index — slice.GInteractions","text":"","code":"# S3 method for GInteractions slice(.data, ...)"},{"path":"/reference/ginteractions-slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slice a GInteractions rows by their index — slice.GInteractions","text":".data GInteractions object ... Integer indicating rows keep.","code":""},{"path":"/reference/ginteractions-slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Slice a GInteractions rows by their index — slice.GInteractions","text":"GInteractions object.","code":""},{"path":"/reference/ginteractions-slice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slice a GInteractions rows by their index — slice.GInteractions","text":"","code":"gi <- read.table(text = \" chr1 1 10 chr1 1 10 chr2 1 10 chr2 1 10 chr3 1 10 chr3 1 10 chr4 1 10 chr4 1 10 chr5 1 10 chr5 1 10\", col.names = c(\"seqnames1\", \"start1\", \"end1\", \"seqnames2\", \"start2\", \"end2\")) |>    as_ginteractions()    #################################################################### # 1. Slice a GInteractions ####################################################################  gi |> slice(1, 2, 3) #> GInteractions object with 3 interactions and 0 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 #>           <Rle> <IRanges>         <Rle> <IRanges> #>   [1]      chr1      1-10 ---      chr1      1-10 #>   [2]      chr2      1-10 ---      chr2      1-10 #>   [3]      chr3      1-10 ---      chr3      1-10 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths gi |> slice(-3) #> GInteractions object with 4 interactions and 0 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 #>           <Rle> <IRanges>         <Rle> <IRanges> #>   [1]      chr1      1-10 ---      chr1      1-10 #>   [2]      chr2      1-10 ---      chr2      1-10 #>   [3]      chr4      1-10 ---      chr4      1-10 #>   [4]      chr5      1-10 ---      chr5      1-10 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths gi |> slice(1:2, 5:4) #> GInteractions object with 4 interactions and 0 metadata columns: #>       seqnames1   ranges1     seqnames2   ranges2 #>           <Rle> <IRanges>         <Rle> <IRanges> #>   [1]      chr1      1-10 ---      chr1      1-10 #>   [2]      chr2      1-10 ---      chr2      1-10 #>   [3]      chr5      1-10 ---      chr5      1-10 #>   [4]      chr4      1-10 ---      chr4      1-10 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths"},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr arrange, filter, mutate, select, slice","code":""},{"path":"/reference/reexports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Objects exported from other packages — reexports","text":"dplyr functions return tabular data frames","code":""},{"path":"/reference/reexports.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Objects exported from other packages — reexports","text":"","code":"# Check dplyr package for examples 1 + 1 #> [1] 2"}]
