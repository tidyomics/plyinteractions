[{"path":"/articles/plyinteractions.html","id":"importing-genomic-interactions-in-r","dir":"Articles","previous_headings":"","what":"Importing genomic interactions in R","title":"plyinteractions","text":"plyinteractions provides consistent interface importing genomic interactions pairs bedpe files GInteractions R, following grammar tidy data manipulation defined tidyverse ecosystem.","code":""},{"path":"/articles/plyinteractions.html","id":"from-bed-like-text-files","dir":"Articles","previous_headings":"Importing genomic interactions in R","what":"From bed-like text files","title":"plyinteractions","text":"Tidy genomic data maniuplation implies first parse genomic files stored disk tabular data frames. Genomic interactions tabular format easy manipulate. can easily parse data.frame GInteractions object using as_ginteractions function. columns containing information core fields future GInteractions object (e.g. seqnames1, strand2, …) can specified using key = value (supported quasiquotation).","code":"bedpe_file <- system.file(\"tests\", \"test.bedpe\", package = \"rtracklayer\") bedpe_df <- read.delim(bedpe_file, header = FALSE, sep = '\\t')  bedpe_df #>      V1        V2        V3    V4        V5        V6                      V7 #> 1  chr7 118965072 118965122  chr7 118970079 118970129 TUPAC_0001:3:1:0:1452#0 #> 2 chr11  46765606  46765656 chr10  46769934  46769984 TUPAC_0001:3:1:0:1472#0 #> 3 chr20  54704674  54704724 chr20  54708987  54709037 TUPAC_0001:3:1:1:1833#0 #>   V8 V9 V10 #> 1 37  +   - #> 2 37  +   - #> 3 37  +   - library(plyinteractions) gi <- bedpe_df |>      as_ginteractions(         seqnames1 = V1, start1 = V2, end1 = V3, strand1 = V9,          seqnames2 = V4, start2 = V5, end2 = V6, strand2 = V10,          starts.in.df.are.0based = TRUE     ) #> Warning in .merge_two_Seqinfo_objects(x, y): Each of the 2 combined objects has sequence levels not in the other: #>   - in 'x': chr11 #>   - in 'y': chr10 #>   Make sure to always combine/compare objects based on the same reference #>   genome (use suppressWarnings() to suppress this warning).  gi #> GInteractions object with 3 interactions and 2 metadata columns: #>       seqnames1             ranges1 strand1     seqnames2             ranges2 #>           <Rle>           <IRanges>   <Rle>         <Rle>           <IRanges> #>   [1]      chr7 118965073-118965122       + ---      chr7 118970080-118970129 #>   [2]     chr11   46765607-46765656       + ---     chr10   46769935-46769984 #>   [3]     chr20   54704675-54704724       + ---     chr20   54708988-54709037 #>       strand2 |                     V7        V8 #>         <Rle> |            <character> <integer> #>   [1]       - | TUPAC_0001:3:1:0:145..        37 #>   [2]       - | TUPAC_0001:3:1:0:147..        37 #>   [3]       - | TUPAC_0001:3:1:1:183..        37 #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 4 sequences from an unspecified genome; no seqlengths"},{"path":"/articles/plyinteractions.html","id":"from-pairs-files","dir":"Articles","previous_headings":"Importing genomic interactions in R","what":"From pairs files","title":"plyinteractions","text":"pairs file format formally defined 4DN consortium. specifications available . can imported R data.frame using read.delim tabular data import functions (including fread vroom larger files), readily coerced GInteractions as_ginteractions.","code":"pairs_file <- HiContactsData::HiContactsData('yeast_wt', 'pairs.gz') #> see ?HiContactsData and browseVignettes('HiContactsData') for documentation #> loading from cache pairs_df <- read.delim(pairs_file, sep = \"\\t\", header = FALSE, comment.char = \"#\") head(pairs_df) #>                                           V1 V2  V3 V4     V5 V6 V7   V8   V9 #> 1  NS500150:527:HHGYNBGXF:3:21611:19085:3986 II 105 II  48548  +  - 1358 1681 #> 2  NS500150:527:HHGYNBGXF:4:13604:19734:2406 II 113 II  45003  -  + 1358 1658 #> 3 NS500150:527:HHGYNBGXF:2:11108:25178:11036 II 119 II 687251  -  + 1358 5550 #> 4   NS500150:527:HHGYNBGXF:1:22301:8468:1586 II 160 II  26124  +  - 1358 1510 #> 5  NS500150:527:HHGYNBGXF:4:23606:24037:2076 II 169 II  39052  +  + 1358 1613 #> 6  NS500150:527:HHGYNBGXF:1:12110:9220:19806 II 177 II  10285  +  - 1358 1416 pairs <- as_ginteractions(pairs_df,      seqnames1 = V2, start1 = V3, strand1 = V6,      seqnames2 = V4, start2 = V5, strand2 = V7,      width1 = 1, width2 = 1,      keep.extra.columns = FALSE ) pairs #> GInteractions object with 471364 interactions and 0 metadata columns: #>            seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 #>                <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> #>        [1]        II       105       + ---        II     48548       - #>        [2]        II       113       - ---        II     45003       + #>        [3]        II       119       - ---        II    687251       + #>        [4]        II       160       + ---        II     26124       - #>        [5]        II       169       + ---        II     39052       + #>        ...       ...       ...     ... ...       ...       ...     ... #>   [471360]        II    808605       + ---        II    809683       + #>   [471361]        II    808609       - ---        II    809917       - #>   [471362]        II    808617       - ---        II    809506       - #>   [471363]        II    809447       + ---        II    809685       + #>   [471364]        II    809472       + ---        II    809675       + #>   ------- #>   regions: 549331 ranges and 0 metadata columns #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"/articles/plyinteractions.html","id":"reverting-from-ginteractions-to-tabular-data-frames","dir":"Articles","previous_headings":"Importing genomic interactions in R","what":"Reverting from GInteractions to tabular data frames","title":"plyinteractions","text":"reverse operation coerce GInteractions back tabular form also possible using as_tibble function tibble package:","code":"tibble::as_tibble(gi) #> # A tibble: 3 × 12 #>   seqnames1  start1   end1 width1 strand1 seqnames2 start2   end2 width2 strand2 #>   <fct>       <int>  <int>  <int> <fct>   <fct>      <int>  <int>  <int> <fct>   #> 1 chr7       1.19e8 1.19e8     50 +       chr7      1.19e8 1.19e8     50 -       #> 2 chr11      4.68e7 4.68e7     50 +       chr10     4.68e7 4.68e7     50 -       #> 3 chr20      5.47e7 5.47e7     50 +       chr20     5.47e7 5.47e7     50 -       #> # ℹ 2 more variables: V7 <chr>, V8 <int>"},{"path":[]},{"path":"/articles/plyinteractions.html","id":"anchors12","dir":"Articles","previous_headings":"Getter functions","what":"anchors{12}","title":"plyinteractions","text":"GInteractions object consists two sets anchors: anchors1 anchors2.  Important note: term anchors, used GInteractions, refers “left-hand” “right-hand” GRanges looking genomic interactions. different anchor term used plyranges.","code":"gi <- read.table(text = \" chr1 1 10 chr1 1 15 + + cis chr1 6 15 chr1 1 20 + + cis chr1 6 20 chr1 6 30 - - cis chr1 11 30 chr2 11 30 - - trans\", col.names = c(   \"seqnames1\", \"start1\", \"end1\",    \"seqnames2\", \"start2\", \"end2\", \"strand1\", \"strand2\",    \"type\") ) |>    as_ginteractions()  anchors(gi) #> $first #> GRanges object with 4 ranges and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chr1      1-10      + #>   [2]     chr1      6-15      + #>   [3]     chr1      6-20      - #>   [4]     chr1     11-30      - #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths #>  #> $second #> GRanges object with 4 ranges and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chr1      1-15      + #>   [2]     chr1      1-20      + #>   [3]     chr1      6-30      - #>   [4]     chr2     11-30      - #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  anchors1(gi) #> GRanges object with 4 ranges and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chr1      1-10      + #>   [2]     chr1      6-15      + #>   [3]     chr1      6-20      - #>   [4]     chr1     11-30      - #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  anchors2(gi) #> GRanges object with 4 ranges and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chr1      1-15      + #>   [2]     chr1      1-20      + #>   [3]     chr1      6-30      - #>   [4]     chr2     11-30      - #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/articles/plyinteractions.html","id":"core-ginteractions-fields","dir":"Articles","previous_headings":"Getter functions","what":"Core GInteractions fields","title":"plyinteractions","text":"seqnames, start/end, width strand return informative core fields GRanges object. Appending 1 2 functions allow end-user fetch corresponding fields GInteractions objects.","code":"seqnames1(gi) #> factor-Rle of length 4 with 1 run #>   Lengths:    4 #>   Values : chr1 #> Levels(2): chr1 chr2  start1(gi) #> [1]  1  6  6 11  end2(gi) #> [1] 15 20 30 30  strand2(gi) #> factor-Rle of length 4 with 2 runs #>   Lengths: 2 2 #>   Values : + - #> Levels(3): + - *  width2(gi) #> [1] 15 20 25 20"},{"path":"/articles/plyinteractions.html","id":"metadata-columns","dir":"Articles","previous_headings":"Getter functions","what":"Metadata columns","title":"plyinteractions","text":"GInteractions contain associated metadata stored DataFrame can recovered using standard mcols function: Individual metadata columns can also accessed using $ notation. Auto-completion enabled method.","code":"mcols(gi) #> DataFrame with 4 rows and 1 column #>          type #>   <character> #> 1         cis #> 2         cis #> 3         cis #> 4       trans gi$type #> [1] \"cis\"   \"cis\"   \"cis\"   \"trans\""},{"path":"/articles/plyinteractions.html","id":"extra-genomic-related-informations","dir":"Articles","previous_headings":"Getter functions","what":"Extra genomic-related informations","title":"plyinteractions","text":"","code":"regions(gi) #> GRanges object with 8 ranges and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chr1      1-10      + #>   [2]     chr1      1-15      + #>   [3]     chr1      1-20      + #>   [4]     chr1      6-15      + #>   [5]     chr1      6-20      - #>   [6]     chr1      6-30      - #>   [7]     chr1     11-30      - #>   [8]     chr2     11-30      - #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  seqinfo(gi) #> Seqinfo object with 2 sequences from an unspecified genome; no seqlengths: #>   seqnames seqlengths isCircular genome #>   chr1             NA         NA   <NA> #>   chr2             NA         NA   <NA>"},{"path":"/articles/plyinteractions.html","id":"pinned-and-anchored-ginteractions","dir":"Articles","previous_headings":"","what":"Pinned (and anchored) GInteractions","title":"plyinteractions","text":"anchoring approach developed plyranges package allows handy control way GRanges object extended using stretch function. enable workflow GInteractions, two classes defined: PinnedGInteractions AnchoredPinnedGInteractions.","code":""},{"path":"/articles/plyinteractions.html","id":"pinnedginteractions","dir":"Articles","previous_headings":"Pinned (and anchored) GInteractions","what":"PinnedGInteractions","title":"plyinteractions","text":"Pinning GInteractions object used specify set anchors (.e. anchors1 anchors2) affected plyranges functions. pinned GInteractions object can reverted back unpinned GInteractions object.","code":"gi |> pin_by(\"1\") #> PinnedGInteractions object with 4 interactions and 1 metadata column: #> Pinned on: anchors1 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1      1-10       + ---      chr1      1-15       + |         cis #>   [2]      chr1      6-15       + ---      chr1      1-20       + |         cis #>   [3]      chr1      6-20       - ---      chr1      6-30       - |         cis #>   [4]      chr1     11-30       - ---      chr2     11-30       - |       trans #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  pgi <- gi |> pin_by(\"2\") pin(pgi) #> [1] 2  pinned_anchors(pgi) #> GRanges object with 4 ranges and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chr1      1-15      + #>   [2]     chr1      1-20      + #>   [3]     chr1      6-30      - #>   [4]     chr2     11-30      - #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths unpin(pgi) #> GInteractions object with 4 interactions and 1 metadata column: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1      1-10       + ---      chr1      1-15       + |         cis #>   [2]      chr1      6-15       + ---      chr1      1-20       + |         cis #>   [3]      chr1      6-20       - ---      chr1      6-30       - |         cis #>   [4]      chr1     11-30       - ---      chr2     11-30       - |       trans #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/articles/plyinteractions.html","id":"anchoredpinnedginteractions","dir":"Articles","previous_headings":"Pinned (and anchored) GInteractions","what":"AnchoredPinnedGInteractions","title":"plyinteractions","text":"plyranges operations can work “anchored\" GRanges. enable operations either anchors1 anchors2, pinned anchors{12} GInteractions object can ”anchored”.","code":"gi |> pin_by(\"1\") |> anchor_5p() #> AnchoredPinnedGInteractions object with 4 interactions and 1 metadata column: #> Pinned on: anchors1 | Anchored by: 5p #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1      1-10       + ---      chr1      1-15       + |         cis #>   [2]      chr1      6-15       + ---      chr1      1-20       + |         cis #>   [3]      chr1      6-20       - ---      chr1      6-30       - |         cis #>   [4]      chr1     11-30       - ---      chr2     11-30       - |       trans #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/articles/plyinteractions.html","id":"plyranges-operations-on-ginteractions","dir":"Articles","previous_headings":"","what":"plyranges operations on GInteractions","title":"plyinteractions","text":"plyranges arithmetic functions available (Anchored)PinnedGInteractions objects. Important note 1: GInteractions must pinned specific anchor set (anchors1 anchors2) plyranges functions work. Please use pin_by() function pin GInteractions. Important note 2: stretch function behave PinnedGInteractions AnchoredPinnedGInteractions objects similarly GRanges AnchoredGRanges objects.","code":""},{"path":"/articles/plyinteractions.html","id":"on-pinnedginteractions-objects","dir":"Articles","previous_headings":"plyranges operations on GInteractions","what":"On PinnedGInteractions objects","title":"plyinteractions","text":"plyinteractions extends use verbs developed plyranges manipulate GRanges objects, ensure work GInteractions. GInteractions must “pinned” (using pin_by()) order specify set anchors affected plyranges functions.","code":"gi #> GInteractions object with 4 interactions and 1 metadata column: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1      1-10       + ---      chr1      1-15       + |         cis #>   [2]      chr1      6-15       + ---      chr1      1-20       + |         cis #>   [3]      chr1      6-20       - ---      chr1      6-30       - |         cis #>   [4]      chr1     11-30       - ---      chr2     11-30       - |       trans #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> pin_by(\"1\") |> stretch(10) #> PinnedGInteractions object with 4 interactions and 1 metadata column: #> Pinned on: anchors1 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     -4-15       + ---      chr1      1-15       + |         cis #>   [2]      chr1      1-20       + ---      chr1      1-20       + |         cis #>   [3]      chr1      1-25       - ---      chr1      6-30       - |         cis #>   [4]      chr1      6-35       - ---      chr2     11-30       - |       trans #>   ------- #>   regions: 7 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> pin_by(\"1\") |> shift_right(20) #> PinnedGInteractions object with 4 interactions and 1 metadata column: #> Pinned on: anchors1 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     21-30       + ---      chr1      1-15       + |         cis #>   [2]      chr1     26-35       + ---      chr1      1-20       + |         cis #>   [3]      chr1     26-40       - ---      chr1      6-30       - |         cis #>   [4]      chr1     31-50       - ---      chr2     11-30       - |       trans #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> pin_by(\"1\") |> flank_right(20) #> PinnedGInteractions object with 4 interactions and 1 metadata column: #> Pinned on: anchors1 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     11-30       + ---      chr1      1-15       + |         cis #>   [2]      chr1     16-35       + ---      chr1      1-20       + |         cis #>   [3]      chr1     21-40       - ---      chr1      6-30       - |         cis #>   [4]      chr1     31-50       - ---      chr2     11-30       - |       trans #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/articles/plyinteractions.html","id":"on-anchoredpinnedginteractions-objects","dir":"Articles","previous_headings":"plyranges operations on GInteractions","what":"On AnchoredPinnedGInteractions objects","title":"plyinteractions","text":"pinned GInteractions anchored, stretching plyranges relies anchoring:","code":"gi |> pin_by(\"1\") |> anchor_start() |> stretch(10) #> PinnedGInteractions object with 4 interactions and 1 metadata column: #> Pinned on: anchors1 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1      1-20       + ---      chr1      1-15       + |         cis #>   [2]      chr1      6-25       + ---      chr1      1-20       + |         cis #>   [3]      chr1      6-30       - ---      chr1      6-30       - |         cis #>   [4]      chr1     11-40       - ---      chr2     11-30       - |       trans #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> pin_by(\"1\") |> anchor_center() |> stretch(10) #> PinnedGInteractions object with 4 interactions and 1 metadata column: #> Pinned on: anchors1 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     -4-15       + ---      chr1      1-15       + |         cis #>   [2]      chr1      1-20       + ---      chr1      1-20       + |         cis #>   [3]      chr1      1-25       - ---      chr1      6-30       - |         cis #>   [4]      chr1      6-35       - ---      chr2     11-30       - |       trans #>   ------- #>   regions: 7 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/articles/plyinteractions.html","id":"dplyr-operations-on-ginteractions","dir":"Articles","previous_headings":"","what":"dplyr operations on GInteractions","title":"plyinteractions","text":"plyinteractions provides set verbs developing analysis pipelines based GInteractions objects represent genomic interactions. verbs extend dplyr functionalities operate GInteractions object tabular data object.","code":""},{"path":"/articles/plyinteractions.html","id":"mutating-columns","dir":"Articles","previous_headings":"dplyr operations on GInteractions","what":"Mutating columns","title":"plyinteractions","text":"mutate supports accessing existing columns:","code":"gi |> mutate(cis = seqnames1 == seqnames2) #> GInteractions object with 4 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1      1-10       + ---      chr1      1-15       + |         cis #>   [2]      chr1      6-15       + ---      chr1      1-20       + |         cis #>   [3]      chr1      6-20       - ---      chr1      6-30       - |         cis #>   [4]      chr1     11-30       - ---      chr2     11-30       - |       trans #>         cis #>       <Rle> #>   [1]  TRUE #>   [2]  TRUE #>   [3]  TRUE #>   [4] FALSE #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> mutate(both_chr = paste(seqnames1, seqnames2, sep = \"_\")) #> GInteractions object with 4 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1      1-10       + ---      chr1      1-15       + |         cis #>   [2]      chr1      6-15       + ---      chr1      1-20       + |         cis #>   [3]      chr1      6-20       - ---      chr1      6-30       - |         cis #>   [4]      chr1     11-30       - ---      chr2     11-30       - |       trans #>        both_chr #>           <Rle> #>   [1] chr1_chr1 #>   [2] chr1_chr1 #>   [3] chr1_chr1 #>   [4] chr1_chr2 #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> mutate(start1 = 1) #> GInteractions object with 4 interactions and 1 metadata column: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1      1-10       + ---      chr1      1-15       + |         cis #>   [2]      chr1      1-15       + ---      chr1      1-20       + |         cis #>   [3]      chr1      1-20       - ---      chr1      6-30       - |         cis #>   [4]      chr1      1-30       - ---      chr2     11-30       - |       trans #>   ------- #>   regions: 7 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/articles/plyinteractions.html","id":"grouping-columns","dir":"Articles","previous_headings":"dplyr operations on GInteractions","what":"Grouping columns","title":"plyinteractions","text":"group_by supports accessing core metadata columns:","code":"gi |> group_by(seqnames2) #> GroupedGInteractions object with 4 interactions and 1 metadata column: #> Groups: seqnames2 [2] #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1      1-10       + ---      chr1      1-15       + |         cis #>   [2]      chr1      6-15       + ---      chr1      1-20       + |         cis #>   [3]      chr1      6-20       - ---      chr1      6-30       - |         cis #>   [4]      chr1     11-30       - ---      chr2     11-30       - |       trans #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> group_by(cis = seqnames1 == seqnames2) #> GroupedGInteractions object with 4 interactions and 2 metadata columns: #> Groups: cis [2] #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1      1-10       + ---      chr1      1-15       + |         cis #>   [2]      chr1      6-15       + ---      chr1      1-20       + |         cis #>   [3]      chr1      6-20       - ---      chr1      6-30       - |         cis #>   [4]      chr1     11-30       - ---      chr2     11-30       - |       trans #>         cis #>       <Rle> #>   [1]  TRUE #>   [2]  TRUE #>   [3]  TRUE #>   [4] FALSE #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> group_by(seqnames2, cis = seqnames1 == seqnames2) #> GroupedGInteractions object with 4 interactions and 2 metadata columns: #> Groups: seqnames2, cis [2] #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1      1-10       + ---      chr1      1-15       + |         cis #>   [2]      chr1      6-15       + ---      chr1      1-20       + |         cis #>   [3]      chr1      6-20       - ---      chr1      6-30       - |         cis #>   [4]      chr1     11-30       - ---      chr2     11-30       - |       trans #>         cis #>       <Rle> #>   [1]  TRUE #>   [2]  TRUE #>   [3]  TRUE #>   [4] FALSE #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/articles/plyinteractions.html","id":"summarizing-columns","dir":"Articles","previous_headings":"dplyr operations on GInteractions","what":"Summarizing columns","title":"plyinteractions","text":"Summarizing grouped GInteractions can extremely powerful.","code":"pairs |> group_by(same_strand = strand1 == strand2) |>      summarize(         neg_strand = sum(strand1 == \"-\"),          pos_strand = sum(strand1 == \"+\")     ) #> DataFrame with 2 rows and 3 columns #>   same_strand neg_strand pos_strand #>         <Rle>  <integer>  <integer> #> 1       FALSE      97963     102780 #> 2        TRUE     136360     134261  pairs |> group_by(same_strand = strand1 == strand2) |> tally() #> DataFrame with 2 rows and 2 columns #>   same_strand         n #>         <Rle> <integer> #> 1       FALSE    200743 #> 2        TRUE    270621  pairs |> count(strand1, strand2) #> DataFrame with 4 rows and 3 columns #>   strand1 strand2         n #>     <Rle>   <Rle> <integer> #> 1       +       +    134261 #> 2       +       -    102780 #> 3       -       +     97963 #> 4       -       -    136360"},{"path":"/articles/plyinteractions.html","id":"filtering-columns","dir":"Articles","previous_headings":"dplyr operations on GInteractions","what":"Filtering columns","title":"plyinteractions","text":"filter supports logical expressions:","code":"gi |> filter(seqnames1 == 'chr11') #> GInteractions object with 0 interactions and 1 metadata column: #>    seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>        <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> filter(start1 >= 1e8) #> GInteractions object with 0 interactions and 1 metadata column: #>    seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>        <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> filter(seqnames1 == seqnames2) #> GInteractions object with 3 interactions and 1 metadata column: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1      1-10       + ---      chr1      1-15       + |         cis #>   [2]      chr1      6-15       + ---      chr1      1-20       + |         cis #>   [3]      chr1      6-20       - ---      chr1      6-30       - |         cis #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/articles/plyinteractions.html","id":"selecting-columns","dir":"Articles","previous_headings":"dplyr operations on GInteractions","what":"Selecting columns","title":"plyinteractions","text":"select supports <tidy-select> arguments: Note core fields (e.g. seqnames1, strand2, …) retrieved using approach, metadata columns parsed. Selecting subset core fields GInteractions lead loss required information (non-selected core fields). Forcing selection core fields still possible using .drop_ranges argument select(). results coercion selected columns DataFrame.","code":"gi |> select(type) #> GInteractions object with 4 interactions and 1 metadata column: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1      1-10       + ---      chr1      1-15       + |         cis #>   [2]      chr1      6-15       + ---      chr1      1-20       + |         cis #>   [3]      chr1      6-20       - ---      chr1      6-30       - |         cis #>   [4]      chr1     11-30       - ---      chr2     11-30       - |       trans #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> select(contains(\"typ\")) #> GInteractions object with 4 interactions and 1 metadata column: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1      1-10       + ---      chr1      1-15       + |         cis #>   [2]      chr1      6-15       + ---      chr1      1-20       + |         cis #>   [3]      chr1      6-20       - ---      chr1      6-30       - |         cis #>   [4]      chr1     11-30       - ---      chr2     11-30       - |       trans #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> select(starts_with(\"ty\")) #> GInteractions object with 4 interactions and 1 metadata column: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1      1-10       + ---      chr1      1-15       + |         cis #>   [2]      chr1      6-15       + ---      chr1      1-20       + |         cis #>   [3]      chr1      6-20       - ---      chr1      6-30       - |         cis #>   [4]      chr1     11-30       - ---      chr2     11-30       - |       trans #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths ## This does not restrict to `seqnames1` and `seqnames2` columns.  gi |> select(starts_with('seq'))  #> GInteractions object with 4 interactions and 0 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> #>   [1]      chr1      1-10       + ---      chr1      1-15       + #>   [2]      chr1      6-15       + ---      chr1      1-20       + #>   [3]      chr1      6-20       - ---      chr1      6-30       - #>   [4]      chr1     11-30       - ---      chr2     11-30       - #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths ## This selects `seqnames1` and `seqnames2` columns but converts the output ## into a `DataFrame`. gi |> select(starts_with('seq'), .drop_ranges = TRUE)  #> DataFrame with 4 rows and 2 columns #>   seqnames1 seqnames2 #>       <Rle>     <Rle> #> 1      chr1      chr1 #> 2      chr1      chr1 #> 3      chr1      chr1 #> 4      chr1      chr2"},{"path":"/articles/plyinteractions.html","id":"slicing-rows","dir":"Articles","previous_headings":"dplyr operations on GInteractions","what":"Slicing rows","title":"plyinteractions","text":"","code":"gi |> slice(1, 2) #> GInteractions object with 2 interactions and 1 metadata column: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1      1-10       + ---      chr1      1-15       + |         cis #>   [2]      chr1      6-15       + ---      chr1      1-20       + |         cis #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths gi |> slice(-3) #> GInteractions object with 3 interactions and 1 metadata column: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1      1-10       + ---      chr1      1-15       + |         cis #>   [2]      chr1      6-15       + ---      chr1      1-20       + |         cis #>   [3]      chr1     11-30       - ---      chr2     11-30       - |       trans #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/articles/plyinteractions.html","id":"citing-plyinteractions","dir":"Articles","previous_headings":"","what":"Citing plyinteractions","title":"plyinteractions","text":"hope plyinteractions useful research. Please use following information cite package overall approach. Thank !","code":"## Citation info citation(\"plyinteractions\") #> To cite package 'plyinteractions' in publications use: #>  #>   Serizay J (2023). _plyinteractions: Extending tidy verbs to genomic #>   interactions_. R package version 0.98.0, #>   <https://github.com/js2264/plyinteractions>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {plyinteractions: Extending tidy verbs to genomic interactions}, #>     author = {Jacques Serizay}, #>     year = {2023}, #>     note = {R package version 0.98.0}, #>     url = {https://github.com/js2264/plyinteractions}, #>   }"},{"path":"/articles/plyinteractions.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"plyinteractions","text":"plyinteractions package introduces tidy methods GInteractions class defined InteractionSet package (Lun, Perry, Ing-Simmons, 2016). plyinteractions package follows tidy principles defined tabular data genomic ranges: dplyr (Wickham, François, Henry, Müller, Vaughan, 2023) rlang (Henry Wickham, 2023) plyranges (Lee, Stuart, Cook, Dianne, Lawrence, Michael, 2019) plyinteractions package (Serizay, 2023) written using following resources: R (R Core Team, 2023) devtools usethis Supporting documentation generated using following resources: BiocStyle (Oleś, 2023) knitr (Xie, 2023) RefManageR (McLean, 2017) rmarkdown (Allaire, Xie, Dervieux, McPherson, Luraschi, Ushey, Atkins, Wickham, Cheng, Chang, Iannone, 2023)","code":""},{"path":"/articles/plyinteractions.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"plyinteractions","text":"R session information:","code":"#> ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.3.1 (2023-06-16) #>  os       Ubuntu 22.04.3 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       UTC #>  date     2023-09-12 #>  pandoc   3.1.1 @ /usr/local/bin/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── #>  package                * version   date (UTC) lib source #>  abind                    1.4-5     2016-07-21 [1] CRAN (R 4.3.1) #>  AnnotationDbi            1.63.2    2023-07-02 [1] Bioconductor #>  AnnotationHub          * 3.9.2     2023-08-24 [1] Bioconductor #>  backports                1.4.1     2021-12-13 [1] CRAN (R 4.3.1) #>  bibtex                   0.5.1     2023-01-26 [1] CRAN (R 4.3.1) #>  Biobase                * 2.61.0    2023-04-25 [1] Bioconductor #>  BiocFileCache          * 2.9.1     2023-07-12 [1] Bioconductor #>  BiocGenerics           * 0.47.0    2023-04-25 [1] Bioconductor #>  BiocIO                   1.11.0    2023-04-25 [1] Bioconductor #>  BiocManager              1.30.22   2023-08-08 [1] CRAN (R 4.3.1) #>  BiocParallel             1.35.4    2023-08-17 [1] Bioconductor #>  BiocStyle              * 2.29.1    2023-07-19 [1] Bioconductor #>  BiocVersion              3.18.0    2023-04-25 [2] Bioconductor #>  Biostrings               2.69.2    2023-07-02 [1] Bioconductor #>  bit                      4.0.5     2022-11-15 [1] CRAN (R 4.3.1) #>  bit64                    4.0.5     2020-08-30 [1] CRAN (R 4.3.1) #>  bitops                   1.0-7     2021-04-24 [1] CRAN (R 4.3.1) #>  blob                     1.2.4     2023-03-17 [1] CRAN (R 4.3.1) #>  bookdown                 0.35      2023-08-09 [1] CRAN (R 4.3.1) #>  bslib                    0.5.1     2023-08-11 [2] CRAN (R 4.3.1) #>  cachem                   1.0.8     2023-05-01 [2] CRAN (R 4.3.1) #>  cli                      3.6.1     2023-03-23 [2] CRAN (R 4.3.1) #>  codetools                0.2-19    2023-02-01 [3] CRAN (R 4.3.1) #>  crayon                   1.5.2     2022-09-29 [2] CRAN (R 4.3.1) #>  curl                     5.0.2     2023-08-14 [2] CRAN (R 4.3.1) #>  DBI                      1.1.3     2022-06-18 [1] CRAN (R 4.3.1) #>  dbplyr                 * 2.3.3     2023-07-07 [1] CRAN (R 4.3.1) #>  DelayedArray             0.27.10   2023-07-28 [1] Bioconductor #>  desc                     1.4.2     2022-09-08 [2] CRAN (R 4.3.1) #>  digest                   0.6.33    2023-07-07 [2] CRAN (R 4.3.1) #>  dplyr                    1.1.2     2023-04-20 [1] CRAN (R 4.3.1) #>  ellipsis                 0.3.2     2021-04-29 [2] CRAN (R 4.3.1) #>  evaluate                 0.21      2023-05-05 [2] CRAN (R 4.3.1) #>  ExperimentHub          * 2.9.1     2023-07-12 [1] Bioconductor #>  fansi                    1.0.4     2023-01-22 [2] CRAN (R 4.3.1) #>  fastmap                  1.1.1     2023-02-24 [2] CRAN (R 4.3.1) #>  filelock                 1.0.2     2018-10-05 [1] CRAN (R 4.3.1) #>  fs                       1.6.3     2023-07-20 [2] CRAN (R 4.3.1) #>  generics                 0.1.3     2022-07-05 [1] CRAN (R 4.3.1) #>  GenomeInfoDb           * 1.37.3    2023-08-25 [1] Bioconductor #>  GenomeInfoDbData         1.2.10    2023-08-24 [1] Bioconductor #>  GenomicAlignments        1.37.0    2023-04-25 [1] Bioconductor #>  GenomicRanges          * 1.53.1    2023-05-04 [1] Bioconductor #>  glue                     1.6.2     2022-02-24 [2] CRAN (R 4.3.1) #>  HiContactsData         * 1.3.0     2023-04-27 [1] Bioconductor #>  htmltools                0.5.6     2023-08-10 [2] CRAN (R 4.3.1) #>  httpuv                   1.6.11    2023-05-11 [2] CRAN (R 4.3.1) #>  httr                     1.4.7     2023-08-15 [2] CRAN (R 4.3.1) #>  InteractionSet         * 1.29.1    2023-06-14 [1] Bioconductor #>  interactiveDisplayBase   1.39.0    2023-04-25 [1] Bioconductor #>  IRanges                * 2.35.2    2023-06-22 [1] Bioconductor #>  jquerylib                0.1.4     2021-04-26 [2] CRAN (R 4.3.1) #>  jsonlite                 1.8.7     2023-06-29 [2] CRAN (R 4.3.1) #>  KEGGREST                 1.41.0    2023-04-25 [1] Bioconductor #>  knitr                    1.43      2023-05-25 [2] CRAN (R 4.3.1) #>  later                    1.3.1     2023-05-02 [2] CRAN (R 4.3.1) #>  lattice                  0.21-8    2023-04-05 [3] CRAN (R 4.3.1) #>  lifecycle                1.0.3     2022-10-07 [2] CRAN (R 4.3.1) #>  lubridate                1.9.2     2023-02-10 [1] CRAN (R 4.3.1) #>  magrittr                 2.0.3     2022-03-30 [2] CRAN (R 4.3.1) #>  Matrix                   1.6-1     2023-08-14 [2] CRAN (R 4.3.1) #>  MatrixGenerics         * 1.13.1    2023-07-25 [1] Bioconductor #>  matrixStats            * 1.0.0     2023-06-02 [1] CRAN (R 4.3.1) #>  memoise                  2.0.1     2021-11-26 [2] CRAN (R 4.3.1) #>  mime                     0.12      2021-09-28 [2] CRAN (R 4.3.1) #>  pillar                   1.9.0     2023-03-22 [2] CRAN (R 4.3.1) #>  pkgconfig                2.0.3     2019-09-22 [2] CRAN (R 4.3.1) #>  pkgdown                  2.0.7     2022-12-14 [1] CRAN (R 4.3.1) #>  plyinteractions        * 0.98.0    2023-09-12 [1] Bioconductor #>  plyr                     1.8.8     2022-11-11 [1] CRAN (R 4.3.1) #>  plyranges                1.21.0    2023-04-25 [1] Bioconductor #>  png                      0.1-8     2022-11-29 [1] CRAN (R 4.3.1) #>  promises                 1.2.1     2023-08-10 [2] CRAN (R 4.3.1) #>  purrr                    1.0.2     2023-08-10 [2] CRAN (R 4.3.1) #>  R6                       2.5.1     2021-08-19 [2] CRAN (R 4.3.1) #>  ragg                     1.2.5     2023-01-12 [2] CRAN (R 4.3.1) #>  rappdirs                 0.3.3     2021-01-31 [2] CRAN (R 4.3.1) #>  Rcpp                     1.0.11    2023-07-06 [2] CRAN (R 4.3.1) #>  RCurl                    1.98-1.12 2023-03-27 [1] CRAN (R 4.3.1) #>  RefManageR             * 1.4.0     2022-09-30 [1] CRAN (R 4.3.1) #>  restfulr                 0.0.15    2022-06-16 [1] CRAN (R 4.3.1) #>  rjson                    0.2.21    2022-01-09 [1] CRAN (R 4.3.1) #>  rlang                    1.1.1     2023-04-28 [2] CRAN (R 4.3.1) #>  rmarkdown                2.24      2023-08-14 [1] CRAN (R 4.3.1) #>  rprojroot                2.0.3     2022-04-02 [2] CRAN (R 4.3.1) #>  Rsamtools                2.17.0    2023-04-25 [1] Bioconductor #>  RSQLite                  2.3.1     2023-04-03 [1] CRAN (R 4.3.1) #>  rtracklayer              1.61.1    2023-08-15 [1] Bioconductor #>  S4Arrays                 1.1.6     2023-08-30 [1] Bioconductor #>  S4Vectors              * 0.39.1    2023-05-03 [1] Bioconductor #>  sass                     0.4.7     2023-07-15 [2] CRAN (R 4.3.1) #>  sessioninfo            * 1.2.2     2021-12-06 [2] CRAN (R 4.3.1) #>  shiny                    1.7.5     2023-08-12 [2] CRAN (R 4.3.1) #>  SparseArray              1.1.11    2023-07-25 [1] Bioconductor #>  stringi                  1.7.12    2023-01-11 [2] CRAN (R 4.3.1) #>  stringr                  1.5.0     2022-12-02 [2] CRAN (R 4.3.1) #>  SummarizedExperiment   * 1.31.1    2023-05-01 [1] Bioconductor #>  systemfonts              1.0.4     2022-02-11 [2] CRAN (R 4.3.1) #>  textshaping              0.3.6     2021-10-13 [2] CRAN (R 4.3.1) #>  tibble                   3.2.1     2023-03-20 [2] CRAN (R 4.3.1) #>  tidyselect               1.2.0     2022-10-10 [1] CRAN (R 4.3.1) #>  timechange               0.2.0     2023-01-11 [1] CRAN (R 4.3.1) #>  utf8                     1.2.3     2023-01-31 [2] CRAN (R 4.3.1) #>  vctrs                    0.6.3     2023-06-14 [2] CRAN (R 4.3.1) #>  withr                    2.5.0     2022-03-03 [2] CRAN (R 4.3.1) #>  xfun                     0.40      2023-08-09 [2] CRAN (R 4.3.1) #>  XML                      3.99-0.14 2023-03-19 [1] CRAN (R 4.3.1) #>  xml2                     1.3.5     2023-07-06 [2] CRAN (R 4.3.1) #>  xtable                   1.8-4     2019-04-21 [2] CRAN (R 4.3.1) #>  XVector                  0.41.1    2023-05-03 [1] Bioconductor #>  yaml                     2.3.7     2023-01-23 [2] CRAN (R 4.3.1) #>  zlibbioc                 1.47.0    2023-04-25 [1] Bioconductor #>  #>  [1] /__w/_temp/Library #>  [2] /usr/local/lib/R/site-library #>  [3] /usr/local/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":"/articles/plyinteractions.html","id":"bibliography","dir":"Articles","previous_headings":"","what":"Bibliography","title":"plyinteractions","text":"[1] J. Allaire, Y. Xie, C. Dervieux, et al. rmarkdown: Dynamic Documents R. R package version 2.24. 2023. URL: https://github.com/rstudio/rmarkdown. [2] L. Henry H. Wickham. rlang: Functions Base Types Core R ‘Tidyverse’ Features. R package version 1.1.1. 2023. URL: https://CRAN.R-project.org/package=rlang. [3] Lee, Stuart, Cook, et al. “plyranges: grammar genomic data transformation”. : Genome Biol. 20.1 (2019), p. 4. URL: http://dx.doi.org/10.1186/s13059-018-1597-8. [4] . T. L. Lun, M. Perry, E. Ing-Simmons. “Infrastructure genomic interactions: Bioconductor classes Hi-C, ChIA-PET related experiments”. : F1000Res. 5 (2016), p. 950. [5] M. W. McLean. “RefManageR: Import Manage BibTeX BibLaTeX References R”. : Journal Open Source Software (2017). DOI: 10.21105/joss.00338. [6] . Oleś. BiocStyle: Standard styles vignettes Bioconductor documents. R package version 2.29.1. 2023. DOI: 10.18129/B9.bioc.BiocStyle. URL: https://bioconductor.org/packages/BiocStyle. [7] R Core Team. R: Language Environment Statistical Computing. R Foundation Statistical Computing. Vienna, Austria, 2023. URL: https://www.R-project.org/. [8] J. Serizay. plyinteractions: Extending tidy verbs genomic interactions. R package version 0.98.0. 2023. URL: https://github.com/js2264/plyinteractions. [9] H. Wickham, R. François, L. Henry, et al. dplyr: Grammar Data Manipulation. R package version 1.1.2. 2023. URL: https://CRAN.R-project.org/package=dplyr. [10] Y. Xie. knitr: General-Purpose Package Dynamic Report Generation R. R package version 1.43. 2023. URL: https://yihui.org/knitr/.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jacques Serizay. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Serizay J (2023). plyinteractions: Extending tidy verbs genomic interactions. R package version 0.98.0, https://github.com/js2264/plyinteractions.","code":"@Manual{,   title = {plyinteractions: Extending tidy verbs to genomic interactions},   author = {Jacques Serizay},   year = {2023},   note = {R package version 0.98.0},   url = {https://github.com/js2264/plyinteractions}, }"},{"path":"/index.html","id":"plyinteractions-","dir":"","previous_headings":"","what":"Extending tidy verbs to genomic interactions","title":"Extending tidy verbs to genomic interactions","text":"plyinteractions provides consistent interface importing wrangling genomic interactions pairs bedpe files GInteractions R. package follows grammar tidy genomic data transformation defined plyranges, based dplyr rlang. operations currently available GInteractions objects : dplyr verbs: Group genomic interactions group_by; Summarize grouped genomic interactions summarize; Tally/count grouped genomic interactions tally count; Modify genomic interactions mutate; Subset genomic interactions filter using <data-masking> logical expressions; Pick columns associated metadata select using <tidy-select> arguments; Subset using indices slice; Order genomic interactions arrange using categorical/numerical variables. plyranges verbs: Stretch specific anchors genomic interactions given width stretch; anchor_* functions control stretching performed; Shift specific anchors genomic interactions shift; Obtain flanking GRanges specific anchors genomic interactions flank.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extending tidy verbs to genomic interactions","text":"plyinteractions can currently installed GitHub:","code":"BiocManager::install(\"tidyomics/plyinteractions\")"},{"path":"/index.html","id":"using-plyinteractions","dir":"","previous_headings":"","what":"Using plyinteractions","title":"Extending tidy verbs to genomic interactions","text":"Read vignette(\"plyinteractions\") details.","code":""},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Extending tidy verbs to genomic interactions","text":"Please note project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Extending tidy verbs to genomic interactions","text":"plyinteractions package heavily based plyranges. adapts number functions methods defined package, developed without seminal work Stuart Lee, Dianne Cook Michael Lawrence: Lee, Stuart, Dianne Cook, Michael Lawrence. 2019. “Plyranges: Grammar Genomic Data Transformation.” Genome Biology 20 (1): 4. https://doi.org/10.1186/s13059-018-1597-8. package largely inspired tidyverse: Wickham H, François R, Henry L, Müller K, Vaughan D (2023). dplyr: Grammar Data Manipulation. R package version 1.1.2, https://CRAN.R-project.org/package=dplyr. Henry L, Wickham H (2023). rlang: Functions Base Types Core R ‘Tidyverse’ Features. R package version 1.1.1, https://CRAN.R-project.org/package=rlang.","code":""},{"path":"/reference/delegating-ginteractions-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DelegatingGInteractions class — DelegatingGInteractions-class","title":"DelegatingGInteractions class — DelegatingGInteractions-class","text":"DelegatingGInteractions class","code":""},{"path":"/reference/delegating-ginteractions-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DelegatingGInteractions class — DelegatingGInteractions-class","text":"","code":"# S4 method for DelegatingGInteractions anchors1(x)  # S4 method for DelegatingGInteractions ranges1(x)  # S4 method for DelegatingGInteractions seqnames1(x)  # S4 method for DelegatingGInteractions start1(x)  # S4 method for DelegatingGInteractions end1(x)  # S4 method for DelegatingGInteractions width1(x)  # S4 method for DelegatingGInteractions strand1(x)  # S4 method for DelegatingGInteractions anchors2(x)  # S4 method for DelegatingGInteractions ranges2(x)  # S4 method for DelegatingGInteractions seqnames2(x)  # S4 method for DelegatingGInteractions start2(x)  # S4 method for DelegatingGInteractions end2(x)  # S4 method for DelegatingGInteractions width2(x)  # S4 method for DelegatingGInteractions strand2(x)  # S4 method for DelegatingGInteractions anchors(x)  # S4 method for DelegatingGInteractions regions(x)  # S4 method for DelegatingGInteractions seqinfo(x)  # S4 method for DelegatingGInteractions mcols(x)  # S4 method for DelegatingGInteractions show(object)"},{"path":"/reference/delegating-ginteractions-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DelegatingGInteractions class — DelegatingGInteractions-class","text":"x, object DelegatingGInteractions object","code":""},{"path":"/reference/delegating-ginteractions-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DelegatingGInteractions class — DelegatingGInteractions-class","text":"DelegatingGInteractions object one core GInteractions fields (e.g. seqnames1, start1, ...)","code":""},{"path":"/reference/dplyr-arrange.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange a GInteractions by a column — dplyr-arrange","title":"Arrange a GInteractions by a column — dplyr-arrange","text":"Arrange GInteractions column","code":""},{"path":"/reference/dplyr-arrange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange a GInteractions by a column — dplyr-arrange","text":"","code":"# S3 method for GInteractions arrange(.data, ...)"},{"path":"/reference/dplyr-arrange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange a GInteractions by a column — dplyr-arrange","text":".data GInteractions object ... Variables, functions variables. Use dplyr::desc() sort variable descending order.","code":""},{"path":"/reference/dplyr-arrange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange a GInteractions by a column — dplyr-arrange","text":"GInteractions object.","code":""},{"path":"/reference/dplyr-arrange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange a GInteractions by a column — dplyr-arrange","text":"","code":"gi <- read.table(text = \" chr1 1 10 chr1 1 10 chr1 2 10 chr2 1 10 chr3 3 10 chr3 1 10 chr4 4 10 chr4 1 10 chr5 5 10 chr5 1 10\", col.names = c(\"seqnames1\", \"start1\", \"end1\", \"seqnames2\", \"start2\", \"end2\")) |>    as_ginteractions() |>    mutate(cis = seqnames1 == seqnames2, score = runif(5)*100, gc = runif(5)) gi #> GInteractions object with 5 interactions and 3 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |   cis #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <Rle> #>   [1]      chr1      1-10       * ---      chr1      1-10       * |  TRUE #>   [2]      chr1      2-10       * ---      chr2      1-10       * | FALSE #>   [3]      chr3      3-10       * ---      chr3      1-10       * |  TRUE #>   [4]      chr4      4-10       * ---      chr4      1-10       * |  TRUE #>   [5]      chr5      5-10       * ---      chr5      1-10       * |  TRUE #>           score        gc #>       <numeric> <numeric> #>   [1]   15.8143  0.575303 #>   [2]   83.5523  0.822121 #>   [3]   55.3954  0.883361 #>   [4]   57.6710  0.279211 #>   [5]   68.4347  0.712520 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths  #################################################################### # 1. Arrange GInteractions by a numerical column ####################################################################  gi |> arrange(gc) #> GInteractions object with 5 interactions and 3 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |   cis #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <Rle> #>   [1]      chr4      4-10       * ---      chr4      1-10       * |  TRUE #>   [2]      chr1      1-10       * ---      chr1      1-10       * |  TRUE #>   [3]      chr5      5-10       * ---      chr5      1-10       * |  TRUE #>   [4]      chr1      2-10       * ---      chr2      1-10       * | FALSE #>   [5]      chr3      3-10       * ---      chr3      1-10       * |  TRUE #>           score        gc #>       <numeric> <numeric> #>   [1]   57.6710  0.279211 #>   [2]   15.8143  0.575303 #>   [3]   68.4347  0.712520 #>   [4]   83.5523  0.822121 #>   [5]   55.3954  0.883361 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths  #################################################################### # 2. Arrange GInteractions by a logical column ####################################################################  gi |> arrange(cis) #> GInteractions object with 5 interactions and 3 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |   cis #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <Rle> #>   [1]      chr1      2-10       * ---      chr2      1-10       * | FALSE #>   [2]      chr1      1-10       * ---      chr1      1-10       * |  TRUE #>   [3]      chr3      3-10       * ---      chr3      1-10       * |  TRUE #>   [4]      chr4      4-10       * ---      chr4      1-10       * |  TRUE #>   [5]      chr5      5-10       * ---      chr5      1-10       * |  TRUE #>           score        gc #>       <numeric> <numeric> #>   [1]   83.5523  0.822121 #>   [2]   15.8143  0.575303 #>   [3]   55.3954  0.883361 #>   [4]   57.6710  0.279211 #>   [5]   68.4347  0.712520 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths  #################################################################### # 3. Arrange GInteractions by a factor ####################################################################  gi |>    mutate(rep = factor(c(\"rep1\", \"rep2\", \"rep1\", \"rep2\", \"rep1\"))) |>    arrange(rep) #> GInteractions object with 5 interactions and 4 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |   cis #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <Rle> #>   [1]      chr1      1-10       * ---      chr1      1-10       * |  TRUE #>   [2]      chr3      3-10       * ---      chr3      1-10       * |  TRUE #>   [3]      chr5      5-10       * ---      chr5      1-10       * |  TRUE #>   [4]      chr1      2-10       * ---      chr2      1-10       * | FALSE #>   [5]      chr4      4-10       * ---      chr4      1-10       * |  TRUE #>           score        gc      rep #>       <numeric> <numeric> <factor> #>   [1]   15.8143  0.575303     rep1 #>   [2]   55.3954  0.883361     rep1 #>   [3]   68.4347  0.712520     rep1 #>   [4]   83.5523  0.822121     rep2 #>   [5]   57.6710  0.279211     rep2 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths  #################################################################### # 4. Combine sorting variables ####################################################################  gi |>    mutate(rep = factor(c(\"rep1\", \"rep2\", \"rep1\", \"rep2\", \"rep1\"))) |>    arrange(dplyr::desc(rep), score) #> GInteractions object with 5 interactions and 4 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |   cis #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <Rle> #>   [1]      chr4      4-10       * ---      chr4      1-10       * |  TRUE #>   [2]      chr1      2-10       * ---      chr2      1-10       * | FALSE #>   [3]      chr1      1-10       * ---      chr1      1-10       * |  TRUE #>   [4]      chr3      3-10       * ---      chr3      1-10       * |  TRUE #>   [5]      chr5      5-10       * ---      chr5      1-10       * |  TRUE #>           score        gc      rep #>       <numeric> <numeric> <factor> #>   [1]   57.6710  0.279211     rep2 #>   [2]   83.5523  0.822121     rep2 #>   [3]   15.8143  0.575303     rep1 #>   [4]   55.3954  0.883361     rep1 #>   [5]   68.4347  0.712520     rep1 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths"},{"path":"/reference/dplyr-count.html","id":null,"dir":"Reference","previous_headings":"","what":"Count or tally GInteractions per group — dplyr-count","title":"Count or tally GInteractions per group — dplyr-count","text":"Count tally GInteractions per group","code":""},{"path":"/reference/dplyr-count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count or tally GInteractions per group — dplyr-count","text":"","code":"# S3 method for GroupedGInteractions tally(x, wt = NULL, sort = FALSE, name = NULL)  # S3 method for GInteractions count(x, ..., wt = NULL, sort = FALSE, name = NULL)"},{"path":"/reference/dplyr-count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count or tally GInteractions per group — dplyr-count","text":"x grouped GInteractions object wt <data-masking> Frequency weights. Can NULL variable: NULL (default), counts number rows group. variable, computes sum(wt) group. sort TRUE, show largest groups top. name name new column output. ... <data-masking> Variables group .","code":""},{"path":"/reference/dplyr-count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count or tally GInteractions per group — dplyr-count","text":"S4Vectors::DataFrame() object, added column count/tablly per group.","code":""},{"path":"/reference/dplyr-count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count or tally GInteractions per group — dplyr-count","text":"","code":"gi <- read.table(text = \" chr1 11 20 chr1 21 30 + + chr1 11 20 chr1 51 55 + + chr1 11 30 chr1 51 55 - - chr1 11 30 chr2 51 60 - -\", col.names = c(   \"seqnames1\", \"start1\", \"end1\",    \"seqnames2\", \"start2\", \"end2\", \"strand1\", \"strand2\") ) |>    as_ginteractions() |>    mutate(score = runif(4), type = c('cis', 'cis', 'cis', 'trans'))  #################################################################### # 1. Tally groups ####################################################################  gi  #> GInteractions object with 4 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |     score #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <numeric> #>   [1]      chr1     11-20       + ---      chr1     21-30       + | 0.4881139 #>   [2]      chr1     11-20       + ---      chr1     51-55       + | 0.5595630 #>   [3]      chr1     11-30       - ---      chr1     51-55       - | 0.0339908 #>   [4]      chr1     11-30       - ---      chr2     51-60       - | 0.3271801 #>              type #>       <character> #>   [1]         cis #>   [2]         cis #>   [3]         cis #>   [4]       trans #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> group_by(strand1) |> tally() #> DataFrame with 2 rows and 2 columns #>   strand1         n #>     <Rle> <integer> #> 1       +         2 #> 2       -         2  gi |> group_by(type) |> tally() #> DataFrame with 2 rows and 2 columns #>          type         n #>   <character> <integer> #> 1         cis         3 #> 2       trans         1  #################################################################### # 2. Count per groups ####################################################################  gi |> count(type) #> DataFrame with 2 rows and 2 columns #>          type         n #>   <character> <integer> #> 1         cis         3 #> 2       trans         1  gi |> group_by(type) |> count() #> DataFrame with 2 rows and 2 columns #>          type         n #>   <character> <integer> #> 1         cis         3 #> 2       trans         1  gi |> group_by(type) |> count(strand1) #> DataFrame with 3 rows and 3 columns #>          type strand1         n #>   <character>   <Rle> <integer> #> 1         cis       +         2 #> 2         cis       -         1 #> 3       trans       -         1"},{"path":"/reference/dplyr-filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a GInteractions with tidyverse-like filter — dplyr-filter","title":"Subset a GInteractions with tidyverse-like filter — dplyr-filter","text":"Subset GInteractions tidyverse-like filter","code":""},{"path":"/reference/dplyr-filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a GInteractions with tidyverse-like filter — dplyr-filter","text":"","code":"# S3 method for GInteractions filter(.data, ...)"},{"path":"/reference/dplyr-filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a GInteractions with tidyverse-like filter — dplyr-filter","text":".data GInteractions object ... Expressions return logical value, defined terms variables .data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept.","code":""},{"path":"/reference/dplyr-filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a GInteractions with tidyverse-like filter — dplyr-filter","text":"GInteractions object.","code":""},{"path":"/reference/dplyr-filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a GInteractions with tidyverse-like filter — dplyr-filter","text":"","code":"gi <- read.table(text = \" chr1 1 10 chr1 1 10 chr1 2 10 chr2 1 10 chr3 3 10 chr3 1 10 chr4 4 10 chr4 1 10 chr5 5 10 chr5 1 10\", col.names = c(\"seqnames1\", \"start1\", \"end1\", \"seqnames2\", \"start2\", \"end2\")) |>    as_ginteractions() |>    mutate(cis = seqnames1 == seqnames2, score = runif(5)*100, gc = runif(5)) gi #> GInteractions object with 5 interactions and 3 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |   cis #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <Rle> #>   [1]      chr1      1-10       * ---      chr1      1-10       * |  TRUE #>   [2]      chr1      2-10       * ---      chr2      1-10       * | FALSE #>   [3]      chr3      3-10       * ---      chr3      1-10       * |  TRUE #>   [4]      chr4      4-10       * ---      chr4      1-10       * |  TRUE #>   [5]      chr5      5-10       * ---      chr5      1-10       * |  TRUE #>           score        gc #>       <numeric> <numeric> #>   [1]   60.3803  0.526737 #>   [2]   34.3348  0.565126 #>   [3]   19.3438  0.997883 #>   [4]   23.0105  0.620592 #>   [5]   30.0775  0.875408 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths  #################################################################### # 1. Filter metadata columns from GInteractions by condition ####################################################################  gi |> filter(gc > 0.1) #> GInteractions object with 5 interactions and 3 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |   cis #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <Rle> #>   [1]      chr1      1-10       * ---      chr1      1-10       * |  TRUE #>   [2]      chr1      2-10       * ---      chr2      1-10       * | FALSE #>   [3]      chr3      3-10       * ---      chr3      1-10       * |  TRUE #>   [4]      chr4      4-10       * ---      chr4      1-10       * |  TRUE #>   [5]      chr5      5-10       * ---      chr5      1-10       * |  TRUE #>           score        gc #>       <numeric> <numeric> #>   [1]   60.3803  0.526737 #>   [2]   34.3348  0.565126 #>   [3]   19.3438  0.997883 #>   [4]   23.0105  0.620592 #>   [5]   30.0775  0.875408 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths gi |> filter(gc > 0.1, score > 50) #> GInteractions object with 1 interaction and 3 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |   cis #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <Rle> #>   [1]      chr1      1-10       * ---      chr1      1-10       * |  TRUE #>           score        gc #>       <numeric> <numeric> #>   [1]   60.3803  0.526737 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths gi |> filter(cis) #> GInteractions object with 4 interactions and 3 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |   cis #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <Rle> #>   [1]      chr1      1-10       * ---      chr1      1-10       * |  TRUE #>   [2]      chr3      3-10       * ---      chr3      1-10       * |  TRUE #>   [3]      chr4      4-10       * ---      chr4      1-10       * |  TRUE #>   [4]      chr5      5-10       * ---      chr5      1-10       * |  TRUE #>           score        gc #>       <numeric> <numeric> #>   [1]   60.3803  0.526737 #>   [2]   19.3438  0.997883 #>   [3]   23.0105  0.620592 #>   [4]   30.0775  0.875408 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths  #################################################################### # 2. On-the-fly calculations ####################################################################  gi #> GInteractions object with 5 interactions and 3 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |   cis #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <Rle> #>   [1]      chr1      1-10       * ---      chr1      1-10       * |  TRUE #>   [2]      chr1      2-10       * ---      chr2      1-10       * | FALSE #>   [3]      chr3      3-10       * ---      chr3      1-10       * |  TRUE #>   [4]      chr4      4-10       * ---      chr4      1-10       * |  TRUE #>   [5]      chr5      5-10       * ---      chr5      1-10       * |  TRUE #>           score        gc #>       <numeric> <numeric> #>   [1]   60.3803  0.526737 #>   [2]   34.3348  0.565126 #>   [3]   19.3438  0.997883 #>   [4]   23.0105  0.620592 #>   [5]   30.0775  0.875408 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths gi |> filter(start1 >= start2 + 3) #> GInteractions object with 2 interactions and 3 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |   cis #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <Rle> #>   [1]      chr4      4-10       * ---      chr4      1-10       * |  TRUE #>   [2]      chr5      5-10       * ---      chr5      1-10       * |  TRUE #>           score        gc #>       <numeric> <numeric> #>   [1]   23.0105  0.620592 #>   [2]   30.0775  0.875408 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths gi |> filter(score * gc > score * 0.5) #> GInteractions object with 5 interactions and 3 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |   cis #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <Rle> #>   [1]      chr1      1-10       * ---      chr1      1-10       * |  TRUE #>   [2]      chr1      2-10       * ---      chr2      1-10       * | FALSE #>   [3]      chr3      3-10       * ---      chr3      1-10       * |  TRUE #>   [4]      chr4      4-10       * ---      chr4      1-10       * |  TRUE #>   [5]      chr5      5-10       * ---      chr5      1-10       * |  TRUE #>           score        gc #>       <numeric> <numeric> #>   [1]   60.3803  0.526737 #>   [2]   34.3348  0.565126 #>   [3]   19.3438  0.997883 #>   [4]   23.0105  0.620592 #>   [5]   30.0775  0.875408 #>   ------- #>   regions: 9 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths"},{"path":"/reference/dplyr-group_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Group GInteractions by columns — dplyr-group_by","title":"Group GInteractions by columns — dplyr-group_by","text":"Group GInteractions columns","code":""},{"path":"/reference/dplyr-group_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group GInteractions by columns — dplyr-group_by","text":"","code":"# S3 method for GInteractions group_by(.data, ..., .add = FALSE)  # S3 method for GInteractions ungroup(x, ...)"},{"path":"/reference/dplyr-group_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group GInteractions by columns — dplyr-group_by","text":".data, x (Grouped)GInteractions object ... Column(s) group . .add FALSE, default, group_by() override existing groups. add existing groups, use .add = TRUE.","code":""},{"path":"/reference/dplyr-group_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group GInteractions by columns — dplyr-group_by","text":"GInteractions object.","code":""},{"path":"/reference/dplyr-group_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group GInteractions by columns — dplyr-group_by","text":"","code":"gi <- read.table(text = \" chr1 11 20 chr1 21 30 chr1 11 20 chr1 51 55 chr1 11 30 chr1 51 55 chr1 11 30 chr2 51 60\", col.names = c(\"seqnames1\", \"start1\", \"end1\", \"seqnames2\", \"start2\", \"end2\")) |>    as_ginteractions() |>    mutate(type = c('cis', 'cis', 'cis', 'trans'), score = runif(4))  #################################################################### # 1. Group by core column ####################################################################  gi |> group_by(end1) #> GroupedGInteractions object with 4 interactions and 2 metadata columns: #> Groups: end1 [2] #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     11-20       * ---      chr1     21-30       * |         cis #>   [2]      chr1     11-20       * ---      chr1     51-55       * |         cis #>   [3]      chr1     11-30       * ---      chr1     51-55       * |         cis #>   [4]      chr1     11-30       * ---      chr2     51-60       * |       trans #>           score #>       <numeric> #>   [1]  0.805111 #>   [2]  0.714322 #>   [3]  0.792571 #>   [4]  0.997462 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> group_by(end1, end2) |> group_data() #> DataFrame with 4 rows and 3 columns #>        end1      end2         .rows #>   <integer> <integer> <IntegerList> #> 1        20        30             1 #> 2        20        55             2 #> 3        30        55             3 #> 4        30        60             4  #################################################################### # 2. Group by metadata column ####################################################################  gi |> group_by(type) |> group_data() #> DataFrame with 2 rows and 2 columns #>          type         .rows #>   <character> <IntegerList> #> 1         cis         1,2,3 #> 2       trans             4  #################################################################### # 3. Combine core and metadata column grouping ####################################################################  gi |> group_by(end1, type) #> GroupedGInteractions object with 4 interactions and 2 metadata columns: #> Groups: end1, type [3] #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     11-20       * ---      chr1     21-30       * |         cis #>   [2]      chr1     11-20       * ---      chr1     51-55       * |         cis #>   [3]      chr1     11-30       * ---      chr1     51-55       * |         cis #>   [4]      chr1     11-30       * ---      chr2     51-60       * |       trans #>           score #>       <numeric> #>   [1]  0.805111 #>   [2]  0.714322 #>   [3]  0.792571 #>   [4]  0.997462 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths gi |> group_by(end1, type) |> group_data() #> DataFrame with 3 rows and 3 columns #>        end1        type         .rows #>   <integer> <character> <IntegerList> #> 1        20         cis           1,2 #> 2        30         cis             3 #> 3        30       trans             4  #################################################################### # 4. Create a new column and group by this new variable ####################################################################  gi |> group_by(class = c(1, 2, 1, 2)) #> GroupedGInteractions object with 4 interactions and 3 metadata columns: #> Groups: class [2] #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     11-20       * ---      chr1     21-30       * |         cis #>   [2]      chr1     11-20       * ---      chr1     51-55       * |         cis #>   [3]      chr1     11-30       * ---      chr1     51-55       * |         cis #>   [4]      chr1     11-30       * ---      chr2     51-60       * |       trans #>           score     class #>       <numeric> <numeric> #>   [1]  0.805111         1 #>   [2]  0.714322         2 #>   [3]  0.792571         1 #>   [4]  0.997462         2 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  #################################################################### # 5. Replace or add groups to a GroupedGInteractions ####################################################################  ggi <- gi |> group_by(class = c(1, 2, 1, 2)) ggi |> group_data() #> DataFrame with 2 rows and 2 columns #>       class         .rows #>   <numeric> <IntegerList> #> 1         1           1,3 #> 2         2           2,4 ggi |> group_by(type) |> group_data() #> DataFrame with 2 rows and 2 columns #>          type         .rows #>   <character> <IntegerList> #> 1         cis         1,2,3 #> 2       trans             4 ggi |> group_by(type, .add = TRUE) |> group_data() #> DataFrame with 3 rows and 3 columns #>       class        type         .rows #>   <numeric> <character> <IntegerList> #> 1         1         cis           1,3 #> 2         2         cis             2 #> 3         2       trans             4  #################################################################### # 6. Ungroup GInteractions ####################################################################  ggi <- gi |> group_by(type, class = c(1, 2, 1, 2)) ggi #> GroupedGInteractions object with 4 interactions and 3 metadata columns: #> Groups: type, class [3] #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     11-20       * ---      chr1     21-30       * |         cis #>   [2]      chr1     11-20       * ---      chr1     51-55       * |         cis #>   [3]      chr1     11-30       * ---      chr1     51-55       * |         cis #>   [4]      chr1     11-30       * ---      chr2     51-60       * |       trans #>           score     class #>       <numeric> <numeric> #>   [1]  0.805111         1 #>   [2]  0.714322         2 #>   [3]  0.792571         1 #>   [4]  0.997462         2 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths ungroup(ggi, type) #> GroupedGInteractions object with 4 interactions and 3 metadata columns: #> Groups: class [2] #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     11-20       * ---      chr1     21-30       * |         cis #>   [2]      chr1     11-20       * ---      chr1     51-55       * |         cis #>   [3]      chr1     11-30       * ---      chr1     51-55       * |         cis #>   [4]      chr1     11-30       * ---      chr2     51-60       * |       trans #>           score     class #>       <numeric> <numeric> #>   [1]  0.805111         1 #>   [2]  0.714322         2 #>   [3]  0.792571         1 #>   [4]  0.997462         2 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths ungroup(ggi, class) #> GroupedGInteractions object with 4 interactions and 3 metadata columns: #> Groups: type [2] #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     11-20       * ---      chr1     21-30       * |         cis #>   [2]      chr1     11-20       * ---      chr1     51-55       * |         cis #>   [3]      chr1     11-30       * ---      chr1     51-55       * |         cis #>   [4]      chr1     11-30       * ---      chr2     51-60       * |       trans #>           score     class #>       <numeric> <numeric> #>   [1]  0.805111         1 #>   [2]  0.714322         2 #>   [3]  0.792571         1 #>   [4]  0.997462         2 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/reference/dplyr-mutate.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutate columns from a GInteractions object — dplyr-mutate","title":"Mutate columns from a GInteractions object — dplyr-mutate","text":"Mutate columns GInteractions object","code":""},{"path":"/reference/dplyr-mutate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutate columns from a GInteractions object — dplyr-mutate","text":"","code":"# S3 method for GInteractions mutate(.data, ...)"},{"path":"/reference/dplyr-mutate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutate columns from a GInteractions object — dplyr-mutate","text":".data GInteractions object ... Optional named arguments specifying columns .data create/modify.","code":""},{"path":"/reference/dplyr-mutate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutate columns from a GInteractions object — dplyr-mutate","text":"GInteractions object.","code":""},{"path":"/reference/dplyr-mutate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutate columns from a GInteractions object — dplyr-mutate","text":"","code":"gi <- read.table(text = \" chr1 10 20 chr1 50 51 chr1 10 50 chr2 30 40\", col.names = c(\"chr1\", \"start1\", \"end1\", \"chr2\", \"start2\", \"end2\")) |>    as_ginteractions(seqnames1 = chr1, seqnames2 = chr2)    #################################################################### # 1. Add metadata columns to a GInteractions object ####################################################################  gi |>    mutate(type = c('cis', 'trans'), score = runif(2)) |>    mutate(type2 = type) #> GInteractions object with 2 interactions and 3 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     10-20       * ---      chr1     50-51       * |         cis #>   [2]      chr1     10-50       * ---      chr2     30-40       * |       trans #>           score       type2 #>       <numeric> <character> #>   [1]  0.523130         cis #>   [2]  0.458053       trans #>   ------- #>   regions: 4 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  #################################################################### # 2. More complex, nested or inplace changes ####################################################################  gi |>    mutate(type = c('cis', 'trans'), score = runif(2)) |>    mutate(type2 = type) |>    mutate(count = c(1, 2), score = count * 2, new_col = paste0(type2, score)) #> GInteractions object with 2 interactions and 5 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     10-20       * ---      chr1     50-51       * |         cis #>   [2]      chr1     10-50       * ---      chr2     30-40       * |       trans #>           score       type2     count     new_col #>       <numeric> <character> <numeric> <character> #>   [1]         2         cis         1        cis2 #>   [2]         4       trans         2      trans4 #>   ------- #>   regions: 4 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  #################################################################### # 3. Core GInteractions columns can also be modified ####################################################################  gi |>    mutate(start1 = 1, end1 = 10, width2 = 30, strand2 = c('-', '+')) #> GInteractions object with 2 interactions and 0 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> #>   [1]      chr1      1-10       * ---      chr1     50-79       - #>   [2]      chr1      1-10       * ---      chr2     30-59       + #>   ------- #>   regions: 3 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  # Note how the core columns are modified sequentially   gi |>    mutate(start1 = 1, end1 = 10) #> GInteractions object with 2 interactions and 0 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> #>   [1]      chr1      1-10       * ---      chr1     50-51       * #>   [2]      chr1      1-10       * ---      chr2     30-40       * #>   ------- #>   regions: 3 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |>    mutate(start1 = 1, end1 = 10, width1 = 50) #> GInteractions object with 2 interactions and 0 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> #>   [1]      chr1      1-50       * ---      chr1     50-51       * #>   [2]      chr1      1-50       * ---      chr2     30-40       * #>   ------- #>   regions: 3 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  #################################################################### # 4. Evaluating core GInteractions columns ####################################################################  gi |>    mutate(     score = runif(2),      cis = seqnames1 == seqnames2,      distance = ifelse(cis, start2 - end1, NA)   ) #> GInteractions object with 2 interactions and 3 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |     score #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <numeric> #>   [1]      chr1     10-20       * ---      chr1     50-51       * |  0.764114 #>   [2]      chr1     10-50       * ---      chr2     30-40       * |  0.943944 #>         cis  distance #>       <Rle> <integer> #>   [1]  TRUE        30 #>   [2] FALSE      <NA> #>   ------- #>   regions: 4 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/reference/dplyr-rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename columns from a GInteractions with tidyverse-like rename — dplyr-rename","title":"Rename columns from a GInteractions with tidyverse-like rename — dplyr-rename","text":"Rename columns GInteractions tidyverse-like rename","code":""},{"path":"/reference/dplyr-rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename columns from a GInteractions with tidyverse-like rename — dplyr-rename","text":"","code":"# S3 method for GInteractions rename(.data, ...)"},{"path":"/reference/dplyr-rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename columns from a GInteractions with tidyverse-like rename — dplyr-rename","text":".data GInteractions object ... Use new_name = old_name rename selected variables.","code":""},{"path":"/reference/dplyr-rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename columns from a GInteractions with tidyverse-like rename — dplyr-rename","text":"GInteractions object.","code":""},{"path":"/reference/dplyr-rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename columns from a GInteractions with tidyverse-like rename — dplyr-rename","text":"","code":"gi <- read.table(text = \" chr1 10 20 chr1 50 51 chr1 10 50 chr2 30 40\", col.names = c(\"chr1\", \"start1\", \"end1\", \"chr2\", \"start2\", \"end2\")) |>    as_ginteractions(seqnames1 = chr1, seqnames2 = chr2) |>    mutate(type = c('cis', 'trans'), score = runif(2))    #################################################################### # 1. Rename metadata columns to a GInteractions object ####################################################################  gi |> rename(interaction_type = type, GC = score) #> GInteractions object with 2 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 | #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | #>   [1]      chr1     10-20       * ---      chr1     50-51       * | #>   [2]      chr1     10-50       * ---      chr2     30-40       * | #>       interaction_type        GC #>            <character> <numeric> #>   [1]              cis  0.312553 #>   [2]            trans  0.541708 #>   ------- #>   regions: 4 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/reference/dplyr-select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select columns within GInteractions metadata columns — dplyr-select","title":"Select columns within GInteractions metadata columns — dplyr-select","text":"Select columns within GInteractions metadata columns","code":""},{"path":"/reference/dplyr-select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select columns within GInteractions metadata columns — dplyr-select","text":"","code":"# S3 method for GInteractions select(.data, ..., .drop_ranges = FALSE)"},{"path":"/reference/dplyr-select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select columns within GInteractions metadata columns — dplyr-select","text":".data GInteractions object ... Integer indicating rows keep. .drop_ranges TRUE, returns DataFrame object. case, enables selection column including core GInteractions columns.","code":""},{"path":"/reference/dplyr-select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select columns within GInteractions metadata columns — dplyr-select","text":"GInteractions object.","code":""},{"path":"/reference/dplyr-select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select columns within GInteractions metadata columns — dplyr-select","text":"","code":"gi <- read.table(text = \" chr1 1 10 chr1 1 10 chr2 1 10 chr2 1 10 chr3 1 10 chr3 1 10 chr4 1 10 chr4 1 10 chr5 1 10 chr5 1 10\", col.names = c(\"seqnames1\", \"start1\", \"end1\", \"seqnames2\", \"start2\", \"end2\")) |>    as_ginteractions() |>    mutate(score = runif(5)*100, cis = TRUE, gc = runif(5))    #################################################################### # 1. Select metadata columns from GInteractions by index ####################################################################  gi |> select(2, 1) #> GInteractions object with 5 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |       cis #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <logical> #>   [1]      chr1      1-10       * ---      chr1      1-10       * |      TRUE #>   [2]      chr2      1-10       * ---      chr2      1-10       * |      TRUE #>   [3]      chr3      1-10       * ---      chr3      1-10       * |      TRUE #>   [4]      chr4      1-10       * ---      chr4      1-10       * |      TRUE #>   [5]      chr5      1-10       * ---      chr5      1-10       * |      TRUE #>           score #>       <numeric> #>   [1]   14.2131 #>   [2]   85.2131 #>   [3]   43.9456 #>   [4]   46.4427 #>   [5]   94.0445 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths gi |> select(-3) #> GInteractions object with 5 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |     score #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <numeric> #>   [1]      chr1      1-10       * ---      chr1      1-10       * |   14.2131 #>   [2]      chr2      1-10       * ---      chr2      1-10       * |   85.2131 #>   [3]      chr3      1-10       * ---      chr3      1-10       * |   43.9456 #>   [4]      chr4      1-10       * ---      chr4      1-10       * |   46.4427 #>   [5]      chr5      1-10       * ---      chr5      1-10       * |   94.0445 #>             cis #>       <logical> #>   [1]      TRUE #>   [2]      TRUE #>   [3]      TRUE #>   [4]      TRUE #>   [5]      TRUE #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths  #################################################################### # 2. Select metadata columns from GInteractions by name ####################################################################  gi |> select(gc, score) #> GInteractions object with 5 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        gc #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <numeric> #>   [1]      chr1      1-10       * ---      chr1      1-10       * |  0.356036 #>   [2]      chr2      1-10       * ---      chr2      1-10       * |  0.505724 #>   [3]      chr3      1-10       * ---      chr3      1-10       * |  0.474504 #>   [4]      chr4      1-10       * ---      chr4      1-10       * |  0.962342 #>   [5]      chr5      1-10       * ---      chr5      1-10       * |  0.851710 #>           score #>       <numeric> #>   [1]   14.2131 #>   [2]   85.2131 #>   [3]   43.9456 #>   [4]   46.4427 #>   [5]   94.0445 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths  #################################################################### # 3. Select metadata columns from GInteractions with <tidy-select> ####################################################################  gi |> select(contains('s')) #> GInteractions object with 5 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |     score #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <numeric> #>   [1]      chr1      1-10       * ---      chr1      1-10       * |   14.2131 #>   [2]      chr2      1-10       * ---      chr2      1-10       * |   85.2131 #>   [3]      chr3      1-10       * ---      chr3      1-10       * |   43.9456 #>   [4]      chr4      1-10       * ---      chr4      1-10       * |   46.4427 #>   [5]      chr5      1-10       * ---      chr5      1-10       * |   94.0445 #>             cis #>       <logical> #>   [1]      TRUE #>   [2]      TRUE #>   [3]      TRUE #>   [4]      TRUE #>   [5]      TRUE #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths gi |> select(matches('^s')) #> GInteractions object with 5 interactions and 1 metadata column: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |     score #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <numeric> #>   [1]      chr1      1-10       * ---      chr1      1-10       * |   14.2131 #>   [2]      chr2      1-10       * ---      chr2      1-10       * |   85.2131 #>   [3]      chr3      1-10       * ---      chr3      1-10       * |   43.9456 #>   [4]      chr4      1-10       * ---      chr4      1-10       * |   46.4427 #>   [5]      chr5      1-10       * ---      chr5      1-10       * |   94.0445 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths  #################################################################### # 4. Select core and metadata columns with .drop_ranges = TRUE ####################################################################  gi |> select(matches('^s'), .drop_ranges = TRUE) #> DataFrame with 5 rows and 7 columns #>   seqnames1    start1 strand1 seqnames2    start2 strand2     score #>       <Rle> <integer>   <Rle>     <Rle> <integer>   <Rle> <numeric> #> 1      chr1         1       *      chr1         1       *   14.2131 #> 2      chr2         1       *      chr2         1       *   85.2131 #> 3      chr3         1       *      chr3         1       *   43.9456 #> 4      chr4         1       *      chr4         1       *   46.4427 #> 5      chr5         1       *      chr5         1       *   94.0445"},{"path":"/reference/dplyr-slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Slice a GInteractions rows by their index — dplyr-slice","title":"Slice a GInteractions rows by their index — dplyr-slice","text":"Slice GInteractions rows index","code":""},{"path":"/reference/dplyr-slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slice a GInteractions rows by their index — dplyr-slice","text":"","code":"# S3 method for GInteractions slice(.data, ...)"},{"path":"/reference/dplyr-slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slice a GInteractions rows by their index — dplyr-slice","text":".data GInteractions object ... Integer indicating rows keep.","code":""},{"path":"/reference/dplyr-slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Slice a GInteractions rows by their index — dplyr-slice","text":"GInteractions object.","code":""},{"path":"/reference/dplyr-slice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slice a GInteractions rows by their index — dplyr-slice","text":"","code":"gi <- read.table(text = \" chr1 1 10 chr1 1 10 chr2 1 10 chr2 1 10 chr3 1 10 chr3 1 10 chr4 1 10 chr4 1 10 chr5 1 10 chr5 1 10\", col.names = c(\"seqnames1\", \"start1\", \"end1\", \"seqnames2\", \"start2\", \"end2\")) |>    as_ginteractions()    #################################################################### # 1. Slice a GInteractions ####################################################################  gi |> slice(1, 2, 3) #> GInteractions object with 3 interactions and 0 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> #>   [1]      chr1      1-10       * ---      chr1      1-10       * #>   [2]      chr2      1-10       * ---      chr2      1-10       * #>   [3]      chr3      1-10       * ---      chr3      1-10       * #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths gi |> slice(-3) #> GInteractions object with 4 interactions and 0 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> #>   [1]      chr1      1-10       * ---      chr1      1-10       * #>   [2]      chr2      1-10       * ---      chr2      1-10       * #>   [3]      chr4      1-10       * ---      chr4      1-10       * #>   [4]      chr5      1-10       * ---      chr5      1-10       * #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths gi |> slice(1:2, 5:4) #> GInteractions object with 4 interactions and 0 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> #>   [1]      chr1      1-10       * ---      chr1      1-10       * #>   [2]      chr2      1-10       * ---      chr2      1-10       * #>   [3]      chr5      1-10       * ---      chr5      1-10       * #>   [4]      chr4      1-10       * ---      chr4      1-10       * #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 5 sequences from an unspecified genome; no seqlengths"},{"path":"/reference/dplyr-summarize.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize GInteractions per group — dplyr-summarize","title":"Summarize GInteractions per group — dplyr-summarize","text":"Summarize GInteractions per group","code":""},{"path":"/reference/dplyr-summarize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize GInteractions per group — dplyr-summarize","text":"","code":"# S3 method for GroupedGInteractions summarise(.data, ...)  # S3 method for GroupedGInteractions summarize(.data, ...)"},{"path":"/reference/dplyr-summarize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize GInteractions per group — dplyr-summarize","text":".data (grouped) GInteractions object ... Name-value pairs summary functions. name name variable result.","code":""},{"path":"/reference/dplyr-summarize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize GInteractions per group — dplyr-summarize","text":"S4Vectors::DataFrame() object: rows come underlying group_keys(). columns combination grouping keys summary expressions provide. GInteractions class preserved, call summarize fundamentally creates new data frame","code":""},{"path":"/reference/dplyr-summarize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize GInteractions per group — dplyr-summarize","text":"","code":"gi <- read.table(text = \" chr1 11 20 chr1 21 30 + + chr1 11 20 chr1 51 55 + + chr1 11 30 chr1 51 55 - - chr1 11 30 chr2 51 60 - -\", col.names = c(   \"seqnames1\", \"start1\", \"end1\",    \"seqnames2\", \"start2\", \"end2\", \"strand1\", \"strand2\") ) |>    as_ginteractions() |>    mutate(score = runif(4), type = c('cis', 'cis', 'cis', 'trans'))  #################################################################### # 1. Summarize a single column ####################################################################  gi #> GInteractions object with 4 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |     score #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <numeric> #>   [1]      chr1     11-20       + ---      chr1     21-30       + |  0.590570 #>   [2]      chr1     11-20       + ---      chr1     51-55       + |  0.187392 #>   [3]      chr1     11-30       - ---      chr1     51-55       - |  0.484040 #>   [4]      chr1     11-30       - ---      chr2     51-60       - |  0.745146 #>              type #>       <character> #>   [1]         cis #>   [2]         cis #>   [3]         cis #>   [4]       trans #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> group_by(type) |> summarize(m = mean(score)) #> DataFrame with 2 rows and 2 columns #>          type         m #>   <character> <numeric> #> 1         cis  0.420667 #> 2       trans  0.745146  gi |> group_by(strand1) |> summarize(m = mean(score)) #> DataFrame with 2 rows and 2 columns #>   strand1         m #>     <Rle> <numeric> #> 1       +  0.388981 #> 2       -  0.614593  df <- gi |>    group_by(strand1) |>    summarize(m = mean(score), n = table(seqnames2)) df #> DataFrame with 2 rows and 3 columns #>   strand1         m             n #>     <Rle> <numeric> <IntegerList> #> 1       +  0.388981           2,0 #> 2       -  0.614593           1,1  df$n #> IntegerList of length 2 #> [[\"1\"]] chr1=2 chr2=0 #> [[\"2\"]] chr1=1 chr2=1  #################################################################### # 2. Summarize by multiple columns ####################################################################  gi |>    group_by(strand1, seqnames2) |>    summarise(m = mean(score), n = table(type)) #> DataFrame with 3 rows and 4 columns #>   strand1 seqnames2         m             n #>     <Rle>     <Rle> <numeric> <IntegerList> #> 1       +      chr1  0.388981           2,0 #> 2       -      chr1  0.484040           1,0 #> 3       -      chr2  0.745146           0,1"},{"path":"/reference/ginteractions-anchor.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage GInteractions anchors with plyranges — ginteractions-anchor","title":"Manage GInteractions anchors with plyranges — ginteractions-anchor","text":"Manage GInteractions anchors plyranges","code":""},{"path":"/reference/ginteractions-anchor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage GInteractions anchors with plyranges — ginteractions-anchor","text":"","code":"# S3 method for AnchoredPinnedGInteractions anchor(x)  # S3 method for AnchoredPinnedGInteractions unanchor(x)  # S3 method for PinnedGInteractions anchor_start(x)  # S3 method for PinnedGInteractions anchor_end(x)  # S3 method for PinnedGInteractions anchor_center(x)  # S3 method for PinnedGInteractions anchor_3p(x)  # S3 method for PinnedGInteractions anchor_5p(x)  # S3 method for AnchoredPinnedGInteractions anchor_start(x)  # S3 method for AnchoredPinnedGInteractions anchor_end(x)  # S3 method for AnchoredPinnedGInteractions anchor_center(x)  # S3 method for AnchoredPinnedGInteractions anchor_3p(x)  # S3 method for AnchoredPinnedGInteractions anchor_5p(x)"},{"path":"/reference/ginteractions-anchor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manage GInteractions anchors with plyranges — ginteractions-anchor","text":"x PinnedGInteractions object","code":""},{"path":"/reference/ginteractions-anchor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manage GInteractions anchors with plyranges — ginteractions-anchor","text":"anchor_* functions return AnchoredPinnedGInteractions object. anchor returns character string indicating pinned anchors anchored . unanchor removes anchoring AnchoredPinnedGInteractions object.","code":""},{"path":"/reference/ginteractions-anchor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manage GInteractions anchors with plyranges — ginteractions-anchor","text":"","code":"gi <- read.table(text = \" chr1 11 20 chr1 21 30 + + chr1 11 20 chr1 51 55 + + chr1 11 30 chr1 51 55 - - chr1 11 30 chr2 51 60 - -\", col.names = c(   \"seqnames1\", \"start1\", \"end1\",    \"seqnames2\", \"start2\", \"end2\", \"strand1\", \"strand2\") ) |>    as_ginteractions() |>    mutate(score = runif(4), type = c('cis', 'cis', 'cis', 'trans'))  #################################################################### # 1. Anchoring pinned genomic interactions with plyranges ####################################################################  gi |> pin_by(\"second\") |> anchor_end() #> AnchoredPinnedGInteractions object with 4 interactions and 2 metadata columns: #> Pinned on: anchors2 | Anchored by: end #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |     score #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <numeric> #>   [1]      chr1     11-20       + ---      chr1     21-30       + |  0.642643 #>   [2]      chr1     11-20       + ---      chr1     51-55       + |  0.164880 #>   [3]      chr1     11-30       - ---      chr1     51-55       - |  0.284452 #>   [4]      chr1     11-30       - ---      chr2     51-60       - |  0.594286 #>              type #>       <character> #>   [1]         cis #>   [2]         cis #>   [3]         cis #>   [4]       trans #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/reference/ginteractions-construct.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a GInteractions object from a tibble, DataFrame or data.frame — as_ginteractions","title":"Construct a GInteractions object from a tibble, DataFrame or data.frame — as_ginteractions","text":"as_ginteractions function looks column names .data called seqnames{1,2}, start{1,2}, end{1,2}, strand{1,2} order construct GInteractions object. default columns .data placed mcols (metadata columns) slot returned object.","code":""},{"path":"/reference/ginteractions-construct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a GInteractions object from a tibble, DataFrame or data.frame — as_ginteractions","text":"","code":"as_ginteractions(   .data,   ...,   keep.extra.columns = TRUE,   starts.in.df.are.0based = FALSE )"},{"path":"/reference/ginteractions-construct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a GInteractions object from a tibble, DataFrame or data.frame — as_ginteractions","text":".data data.frame(), DataFrame() tibble() construct GInteractions object . ... Optional named arguments specifying columns .data containin core components GInteractions object. keep.extra.columns TRUE FALSE (default). TRUE, columns df used form genomic ranges returned GRanges object returned metadata columns object. Otherwise, ignored. starts..df..0based TRUE FALSE (default). TRUE, start positions genomic ranges df considered 0-based converted 1-based returned GRanges object.","code":""},{"path":"/reference/ginteractions-construct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a GInteractions object from a tibble, DataFrame or data.frame — as_ginteractions","text":"GInteractions object.","code":""},{"path":[]},{"path":"/reference/ginteractions-construct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a GInteractions object from a tibble, DataFrame or data.frame — as_ginteractions","text":"","code":"#################################################################### # 1. GInteractions from bedpe files imported into a data.frame ####################################################################  bedpe <- read.table(text = \" chr1 100 200 chr1 5000 5100 bedpe_example1 30 + - chr1 1000 5000 chr1 3000 3800 bedpe_example2 100 + -\", col.names = c(   \"chrom1\", \"start1\", \"end1\",    \"chrom2\", \"start2\", \"end2\", \"name\", \"score\", \"strand1\", \"strand2\")) bedpe |>    as_ginteractions(seqnames1 = chrom1, seqnames2 = chrom2) #> GInteractions object with 2 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 | #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | #>   [1]      chr1   100-200       + ---      chr1 5000-5100       - | #>   [2]      chr1 1000-5000       + ---      chr1 3000-3800       - | #>                 name     score #>          <character> <integer> #>   [1] bedpe_example1        30 #>   [2] bedpe_example2       100 #>   ------- #>   regions: 4 ranges and 0 metadata columns #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  #################################################################### # 2. GInteractions from standard pairs files imported into a data.frame ####################################################################  # Note how the pairs are 0-based and no \"end\" field is provided  # (the standard pairs file format does not have \"end\" fields) # We can provide width1 and width2 to fix this problem.   pairs <- read.table(text = \" pair1 chr1 10000 chr1 20000 + + pair2 chr1 50000 chr1 70000 + + pair3 chr1 60000 chr2 10000 + + pair4 chr1 30000 chr3 40000 + -\",  col.names = c(\"pairID\", \"chr1\", \"pos1\", \"chr2\", \"pos2\", \"strand1\", \"strand2\")) pairs |>    as_ginteractions(     seqnames1 = chr1, start1 = pos1, width1 = 1000,      seqnames2 = chr2, start2 = pos2, width2 = 1000,      starts.in.df.are.0based = TRUE   ) #> GInteractions object with 4 interactions and 1 metadata column: #>       seqnames1     ranges1 strand1     seqnames2     ranges2 strand2 | #>           <Rle>   <IRanges>   <Rle>         <Rle>   <IRanges>   <Rle> | #>   [1]      chr1 10001-11000       + ---      chr1 20001-21000       + | #>   [2]      chr1 50001-51000       + ---      chr1 70001-71000       + | #>   [3]      chr1 60001-61000       + ---      chr2 10001-11000       + | #>   [4]      chr1 30001-31000       + ---      chr3 40001-41000       - | #>            pairID #>       <character> #>   [1]       pair1 #>   [2]       pair2 #>   [3]       pair3 #>   [4]       pair4 #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 3 sequences from an unspecified genome; no seqlengths  #################################################################### # 3. GInteractions from data.frame with extra fields ####################################################################  df <- read.table(text = \" chr1 100 200 chr1 5000 5100 chr1 1000 5000 chr1 3000 3800\", col.names = c(\"chr1\", \"start1\", \"end1\", \"chr2\", \"start2\", \"end2\")) df |>    as_ginteractions(seqnames1 = chr1, seqnames2 = chr2) #> GInteractions object with 2 interactions and 0 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> #>   [1]      chr1   100-200       * ---      chr1 5000-5100       * #>   [2]      chr1 1000-5000       * ---      chr1 3000-3800       * #>   ------- #>   regions: 4 ranges and 0 metadata columns #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  df <- read.table(text = \" chr1 100 200 chr1 5000 5100 chr1 1000 5000 chr1 3000 3800\", col.names = c(\"chr1\", \"start1\", \"end1\", \"chr2\", \"start2\", \"end2\")) df |>    as_ginteractions(seqnames1 = chr1, seqnames2 = chr2, strand1 = '+', strand2 = '-') #> GInteractions object with 2 interactions and 0 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> #>   [1]      chr1   100-200       + ---      chr1 5000-5100       - #>   [2]      chr1 1000-5000       + ---      chr1 3000-3800       - #>   ------- #>   regions: 4 ranges and 0 metadata columns #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  data.frame(type = \"cis\", count = 3) |>    as_ginteractions(     seqnames1 = 'chr1', start1 = 1, end1 = 10,     seqnames2 = 'chr1', start2 = 40, end2 = 50   ) #> GInteractions object with 1 interaction and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1      1-10       * ---      chr1     40-50       * |         cis #>           count #>       <numeric> #>   [1]         3 #>   ------- #>   regions: 2 ranges and 0 metadata columns #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  #################################################################### # 4. GInteractions from a real like pairs files ####################################################################  pairsf <- HiContactsData::HiContactsData('yeast_wt', 'pairs.gz') #> see ?HiContactsData and browseVignettes('HiContactsData') for documentation #> loading from cache pairs <- read.table(pairsf, comment.char = '#', header = FALSE) head(pairs) #>                                           V1 V2  V3 V4     V5 V6 V7   V8   V9 #> 1  NS500150:527:HHGYNBGXF:3:21611:19085:3986 II 105 II  48548  +  - 1358 1681 #> 2  NS500150:527:HHGYNBGXF:4:13604:19734:2406 II 113 II  45003  -  + 1358 1658 #> 3 NS500150:527:HHGYNBGXF:2:11108:25178:11036 II 119 II 687251  -  + 1358 5550 #> 4   NS500150:527:HHGYNBGXF:1:22301:8468:1586 II 160 II  26124  +  - 1358 1510 #> 5  NS500150:527:HHGYNBGXF:4:23606:24037:2076 II 169 II  39052  +  + 1358 1613 #> 6  NS500150:527:HHGYNBGXF:1:12110:9220:19806 II 177 II  10285  +  - 1358 1416 pairs |>    as_ginteractions(     seqnames1 = V2, start1 = V3, width1 = 1, strand1 = V6,      seqnames2 = V4, start2 = V5, width2 = 1, strand2 = V7,     starts.in.df.are.0based = TRUE   ) #> GInteractions object with 471364 interactions and 3 metadata columns: #>            seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 | #>                <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | #>        [1]        II       106       + ---        II     48549       - | #>        [2]        II       114       - ---        II     45004       + | #>        [3]        II       120       - ---        II    687252       + | #>        [4]        II       161       + ---        II     26125       - | #>        [5]        II       170       + ---        II     39053       + | #>        ...       ...       ...     ... ...       ...       ...     ... . #>   [471360]        II    808606       + ---        II    809684       + | #>   [471361]        II    808610       - ---        II    809918       - | #>   [471362]        II    808618       - ---        II    809507       - | #>   [471363]        II    809448       + ---        II    809686       + | #>   [471364]        II    809473       + ---        II    809676       + | #>                                V1        V8        V9 #>                       <character> <integer> <integer> #>        [1] NS500150:527:HHGYNBG..      1358      1681 #>        [2] NS500150:527:HHGYNBG..      1358      1658 #>        [3] NS500150:527:HHGYNBG..      1358      5550 #>        [4] NS500150:527:HHGYNBG..      1358      1510 #>        [5] NS500150:527:HHGYNBG..      1358      1613 #>        ...                    ...       ...       ... #>   [471360] NS500150:527:HHGYNBG..      6316      6320 #>   [471361] NS500150:527:HHGYNBG..      6316      6324 #>   [471362] NS500150:527:HHGYNBG..      6316      6319 #>   [471363] NS500150:527:HHGYNBG..      6319      6321 #>   [471364] NS500150:527:HHGYNBG..      6319      6320 #>   ------- #>   regions: 549331 ranges and 0 metadata columns #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"/reference/ginteractions-count-overlaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Count overlaps between a query GInteractions and a GRanges — ginteractions-count-overlaps","title":"Count overlaps between a query GInteractions and a GRanges — ginteractions-count-overlaps","text":"Count overlaps query GInteractions GRanges","code":""},{"path":"/reference/ginteractions-count-overlaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count overlaps between a query GInteractions and a GRanges — ginteractions-count-overlaps","text":"","code":"# S3 method for PinnedGInteractions count_overlaps(x, y, maxgap = -1L, minoverlap = 0L)  # S3 method for GInteractions count_overlaps(x, y, maxgap = -1L, minoverlap = 0L)  # S3 method for PinnedGInteractions count_overlaps_directed(x, y, maxgap = -1L, minoverlap = 0L)  # S3 method for GInteractions count_overlaps_directed(x, y, maxgap = -1L, minoverlap = 0L)"},{"path":"/reference/ginteractions-count-overlaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count overlaps between a query GInteractions and a GRanges — ginteractions-count-overlaps","text":"x (Pinned)GInteractions object y GRanges object maxgap, minoverlap See ?countOverlaps GenomicRanges package description arguments","code":""},{"path":"/reference/ginteractions-count-overlaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count overlaps between a query GInteractions and a GRanges — ginteractions-count-overlaps","text":"integer vector length x.","code":""},{"path":"/reference/ginteractions-count-overlaps.html","id":"pinned-ginteractions","dir":"Reference","previous_headings":"","what":"Pinned GInteractions","title":"Count overlaps between a query GInteractions and a GRanges — ginteractions-count-overlaps","text":"using count_overlaps() PinnedGInteractions object, pinned anchors used check overlap y. equivalent specifying use.region=\"\" InteractionSet::findOverlaps().","code":""},{"path":"/reference/ginteractions-count-overlaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count overlaps between a query GInteractions and a GRanges — ginteractions-count-overlaps","text":"","code":"gi <- read.table(text = \"       chr1 11 20 - chr1 21 30 +      chr1 11 20 - chr1 51 55 +      chr1 21 30 - chr1 51 55 +      chr1 21 30 - chr2 51 60 +\",       col.names = c(\"seqnames1\", \"start1\", \"end1\", \"strand1\", \"seqnames2\", \"start2\", \"end2\", \"strand2\") ) |> as_ginteractions() |> mutate(id = 1:4, type = 'gi')  gr <- GenomicRanges::GRanges(c(\"chr1:20-30:+\", \"chr2:55-65:-\")) |> plyranges::mutate(id = 1:2, type = 'gr')  gi #> GInteractions object with 4 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        id #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <integer> #>   [1]      chr1     11-20       - ---      chr1     21-30       + |         1 #>   [2]      chr1     11-20       - ---      chr1     51-55       + |         2 #>   [3]      chr1     21-30       - ---      chr1     51-55       + |         3 #>   [4]      chr1     21-30       - ---      chr2     51-60       + |         4 #>              type #>       <character> #>   [1]          gi #>   [2]          gi #>   [3]          gi #>   [4]          gi #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gr #> GRanges object with 2 ranges and 2 metadata columns: #>       seqnames    ranges strand |        id        type #>          <Rle> <IRanges>  <Rle> | <integer> <character> #>   [1]     chr1     20-30      + |         1          gr #>   [2]     chr2     55-65      - |         2          gr #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  #################################################################### # 1. Count overlaps between GInteractions and a subject GRanges ####################################################################  count_overlaps(gi, gr) #> [1] 1 1 1 2  count_overlaps_directed(gi, gr) #> [1] 1 0 0 0  #################################################################### # 2. Count overlaps between PinnedGInteractions and a subject GRanges ####################################################################  gi |> pin_by(\"first\") |> count_overlaps(gr) #> [1] 1 1 1 1  gi |> pin_by(\"second\") |> count_overlaps(gr) #> [1] 1 0 0 1  gi |> pin_by(\"first\") |> count_overlaps_directed(gr) #> [1] 0 0 0 0  gi |> pin_by(\"second\") |> count_overlaps_directed(gr) #> [1] 1 0 0 0"},{"path":"/reference/ginteractions-filter-overlaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter GInteractions overlapping with a GRanges — ginteractions-filter-overlaps","title":"Filter GInteractions overlapping with a GRanges — ginteractions-filter-overlaps","text":"Filter GInteractions overlapping GRanges","code":""},{"path":"/reference/ginteractions-filter-overlaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter GInteractions overlapping with a GRanges — ginteractions-filter-overlaps","text":"","code":"# S3 method for PinnedGInteractions filter_by_overlaps(x, y, maxgap = -1L, minoverlap = 0L)  # S3 method for GInteractions filter_by_overlaps(x, y, maxgap = -1L, minoverlap = 0L)  # S3 method for PinnedGInteractions filter_by_non_overlaps(x, y, maxgap = -1L, minoverlap = 0L)  # S3 method for GInteractions filter_by_non_overlaps(x, y, maxgap = -1L, minoverlap = 0L)"},{"path":"/reference/ginteractions-filter-overlaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter GInteractions overlapping with a GRanges — ginteractions-filter-overlaps","text":"x (Pinned)GInteractions object y GRanges object maxgap, minoverlap See ?countOverlaps GenomicRanges package description arguments","code":""},{"path":"/reference/ginteractions-filter-overlaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter GInteractions overlapping with a GRanges — ginteractions-filter-overlaps","text":"integer vector length x.","code":""},{"path":"/reference/ginteractions-filter-overlaps.html","id":"pinned-ginteractions","dir":"Reference","previous_headings":"","what":"Pinned GInteractions","title":"Filter GInteractions overlapping with a GRanges — ginteractions-filter-overlaps","text":"using filter_by_overlaps() PinnedGInteractions object, pinned anchors used check overlap y. equivalent specifying use.region=\"\" InteractionSet::findOverlaps().","code":""},{"path":"/reference/ginteractions-filter-overlaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter GInteractions overlapping with a GRanges — ginteractions-filter-overlaps","text":"","code":"gi <- read.table(text = \"       chr1 11 20 - chr1 21 30 +      chr1 11 20 - chr1 51 55 +      chr1 21 30 - chr1 51 55 +      chr1 21 30 - chr2 51 60 +\",       col.names = c(\"seqnames1\", \"start1\", \"end1\", \"strand1\", \"seqnames2\", \"start2\", \"end2\", \"strand2\") ) |> as_ginteractions() |> mutate(id = 1:4, type = 'gi')  gr <- GenomicRanges::GRanges(c(\"chr1:20-30:+\", \"chr2:55-65:-\")) |> plyranges::mutate(id = 1:2, type = 'gr')  gi #> GInteractions object with 4 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        id #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <integer> #>   [1]      chr1     11-20       - ---      chr1     21-30       + |         1 #>   [2]      chr1     11-20       - ---      chr1     51-55       + |         2 #>   [3]      chr1     21-30       - ---      chr1     51-55       + |         3 #>   [4]      chr1     21-30       - ---      chr2     51-60       + |         4 #>              type #>       <character> #>   [1]          gi #>   [2]          gi #>   [3]          gi #>   [4]          gi #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gr #> GRanges object with 2 ranges and 2 metadata columns: #>       seqnames    ranges strand |        id        type #>          <Rle> <IRanges>  <Rle> | <integer> <character> #>   [1]     chr1     20-30      + |         1          gr #>   [2]     chr2     55-65      - |         2          gr #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  #################################################################### # 1. Filter GInteractions overlapping with a subject GRanges ####################################################################  filter_by_overlaps(gi, gr) #> GInteractions object with 4 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        id #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <integer> #>   [1]      chr1     11-20       - ---      chr1     21-30       + |         1 #>   [2]      chr1     11-20       - ---      chr1     51-55       + |         2 #>   [3]      chr1     21-30       - ---      chr1     51-55       + |         3 #>   [4]      chr1     21-30       - ---      chr2     51-60       + |         4 #>              type #>       <character> #>   [1]          gi #>   [2]          gi #>   [3]          gi #>   [4]          gi #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  filter_by_non_overlaps(gi, gr) #> GInteractions object with 0 interactions and 2 metadata columns: #>    seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        id #>        <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <integer> #>           type #>    <character> #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  #################################################################### # 2. Filter PinnedGInteractions overlapping with a subject GRanges ####################################################################  gi |> pin_by(\"first\") |> filter_by_overlaps(gr) #> GInteractions object with 4 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        id #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <integer> #>   [1]      chr1     11-20       - ---      chr1     21-30       + |         1 #>   [2]      chr1     11-20       - ---      chr1     51-55       + |         2 #>   [3]      chr1     21-30       - ---      chr1     51-55       + |         3 #>   [4]      chr1     21-30       - ---      chr2     51-60       + |         4 #>              type #>       <character> #>   [1]          gi #>   [2]          gi #>   [3]          gi #>   [4]          gi #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> pin_by(\"first\") |> filter_by_non_overlaps(gr) #> GInteractions object with 0 interactions and 2 metadata columns: #>    seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        id #>        <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <integer> #>           type #>    <character> #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> pin_by(\"second\") |> filter_by_overlaps(gr) #> GInteractions object with 2 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        id #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <integer> #>   [1]      chr1     11-20       - ---      chr1     21-30       + |         1 #>   [2]      chr1     21-30       - ---      chr2     51-60       + |         4 #>              type #>       <character> #>   [1]          gi #>   [2]          gi #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> pin_by(\"second\") |> filter_by_non_overlaps(gr) #> GInteractions object with 2 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        id #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <integer> #>   [1]      chr1     11-20       - ---      chr1     51-55       + |         2 #>   [2]      chr1     21-30       - ---      chr1     51-55       + |         3 #>              type #>       <character> #>   [1]          gi #>   [2]          gi #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/reference/ginteractions-find-overlaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Find overlaps between a query GInteractions and a GRanges — ginteractions-find-overlaps","title":"Find overlaps between a query GInteractions and a GRanges — ginteractions-find-overlaps","text":"Find overlaps query GInteractions GRanges","code":""},{"path":"/reference/ginteractions-find-overlaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find overlaps between a query GInteractions and a GRanges — ginteractions-find-overlaps","text":"","code":"# S3 method for PinnedGInteractions find_overlaps(x, y, maxgap = -1L, minoverlap = 0L, suffix = c(\".x\", \".y\"))  # S3 method for GInteractions find_overlaps(x, y, maxgap = -1L, minoverlap = 0L, suffix = c(\".x\", \".y\"))  # S3 method for PinnedGInteractions find_overlaps_directed(   x,   y,   maxgap = -1L,   minoverlap = 0L,   suffix = c(\".x\", \".y\") )  # S3 method for GInteractions find_overlaps_directed(   x,   y,   maxgap = -1L,   minoverlap = 0L,   suffix = c(\".x\", \".y\") )"},{"path":"/reference/ginteractions-find-overlaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find overlaps between a query GInteractions and a GRanges — ginteractions-find-overlaps","text":"x (Pinned)GInteractions object y GRanges object maxgap, minoverlap See ?findOverlaps GenomicRanges package description arguments suffix Suffix add metadata columns (character vector length 2, default c(\".x\", \".y\")).","code":""},{"path":"/reference/ginteractions-find-overlaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find overlaps between a query GInteractions and a GRanges — ginteractions-find-overlaps","text":"GInteractions object rows corresponding GInteractions x overlap y.","code":""},{"path":"/reference/ginteractions-find-overlaps.html","id":"rationale","dir":"Reference","previous_headings":"","what":"Rationale","title":"Find overlaps between a query GInteractions and a GRanges — ginteractions-find-overlaps","text":"find_overlaps() search overlap GInteractions x GRanges y. return GInteractions object length equal number times x overlaps y. GInteractions additional metadata columns corresponding metadata y. find_overlaps_directed() takes strandness object account.","code":""},{"path":"/reference/ginteractions-find-overlaps.html","id":"pinned-ginteractions","dir":"Reference","previous_headings":"","what":"Pinned GInteractions","title":"Find overlaps between a query GInteractions and a GRanges — ginteractions-find-overlaps","text":"using find_overlaps() PinnedGInteractions object, pinned anchors used check overlap y. equivalent specifying use.region=\"\" InteractionSet::findOverlaps().","code":""},{"path":"/reference/ginteractions-find-overlaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find overlaps between a query GInteractions and a GRanges — ginteractions-find-overlaps","text":"","code":"gi <- read.table(text = \"       chr1 11 20 - chr1 21 30 +      chr1 11 20 - chr1 51 55 +      chr1 21 30 - chr1 51 55 +      chr1 21 30 - chr2 51 60 +\",       col.names = c(\"seqnames1\", \"start1\", \"end1\", \"strand1\", \"seqnames2\", \"start2\", \"end2\", \"strand2\") ) |> as_ginteractions() |> mutate(id = 1:4, type = 'gi')  gr <- GenomicRanges::GRanges(c(\"chr1:20-30:+\", \"chr2:55-65:-\")) |> plyranges::mutate(id = 1:2, type = 'gr')  gi #> GInteractions object with 4 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        id #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <integer> #>   [1]      chr1     11-20       - ---      chr1     21-30       + |         1 #>   [2]      chr1     11-20       - ---      chr1     51-55       + |         2 #>   [3]      chr1     21-30       - ---      chr1     51-55       + |         3 #>   [4]      chr1     21-30       - ---      chr2     51-60       + |         4 #>              type #>       <character> #>   [1]          gi #>   [2]          gi #>   [3]          gi #>   [4]          gi #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gr #> GRanges object with 2 ranges and 2 metadata columns: #>       seqnames    ranges strand |        id        type #>          <Rle> <IRanges>  <Rle> | <integer> <character> #>   [1]     chr1     20-30      + |         1          gr #>   [2]     chr2     55-65      - |         2          gr #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  #################################################################### # 1. Find overlaps between GInteractions and a subject GRanges ####################################################################  find_overlaps(gi, gr) #> GInteractions object with 5 interactions and 4 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |      id.x #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <integer> #>   [1]      chr1     11-20       - ---      chr1     21-30       + |         1 #>   [2]      chr1     11-20       - ---      chr1     51-55       + |         2 #>   [3]      chr1     21-30       - ---      chr1     51-55       + |         3 #>   [4]      chr1     21-30       - ---      chr2     51-60       + |         4 #>   [5]      chr1     21-30       - ---      chr2     51-60       + |         4 #>            type.x      id.y      type.y #>       <character> <integer> <character> #>   [1]          gi         1          gr #>   [2]          gi         1          gr #>   [3]          gi         1          gr #>   [4]          gi         1          gr #>   [5]          gi         2          gr #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  find_overlaps_directed(gi, gr) #> GInteractions object with 1 interaction and 4 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |      id.x #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <integer> #>   [1]      chr1     11-20       - ---      chr1     21-30       + |         1 #>            type.x      id.y      type.y #>       <character> <integer> <character> #>   [1]          gi         1          gr #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  #################################################################### # 2. Find overlaps between PinnedGInteractions and a subject GRanges ####################################################################  gi |> pin_by(\"first\") |> find_overlaps(gr) #> GInteractions object with 4 interactions and 4 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |      id.x #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <integer> #>   [1]      chr1     11-20       - ---      chr1     21-30       + |         1 #>   [2]      chr1     11-20       - ---      chr1     51-55       + |         2 #>   [3]      chr1     21-30       - ---      chr1     51-55       + |         3 #>   [4]      chr1     21-30       - ---      chr2     51-60       + |         4 #>            type.x      id.y      type.y #>       <character> <integer> <character> #>   [1]          gi         1          gr #>   [2]          gi         1          gr #>   [3]          gi         1          gr #>   [4]          gi         1          gr #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> pin_by(\"second\") |> find_overlaps(gr) #> GInteractions object with 2 interactions and 4 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |      id.x #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <integer> #>   [1]      chr1     11-20       - ---      chr1     21-30       + |         1 #>   [2]      chr1     21-30       - ---      chr2     51-60       + |         4 #>            type.x      id.y      type.y #>       <character> <integer> <character> #>   [1]          gi         1          gr #>   [2]          gi         2          gr #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> pin_by(\"first\") |> find_overlaps_directed(gr) #> GInteractions object with 0 interactions and 4 metadata columns: #>    seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |      id.x #>        <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <integer> #>         type.x      id.y      type.y #>    <character> <integer> <character> #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> pin_by(\"second\") |> find_overlaps_directed(gr) #> GInteractions object with 1 interaction and 4 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |      id.x #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <integer> #>   [1]      chr1     11-20       - ---      chr1     21-30       + |         1 #>            type.x      id.y      type.y #>       <character> <integer> <character> #>   [1]          gi         1          gr #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/reference/ginteractions-getters.html","id":null,"dir":"Reference","previous_headings":"","what":"Enhanced GInteractions getters — ginteractions-getters","title":"Enhanced GInteractions getters — ginteractions-getters","text":"Enhanced GInteractions getters","code":""},{"path":"/reference/ginteractions-getters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enhanced GInteractions getters — ginteractions-getters","text":"","code":"# S4 method for GInteractions $(x, name)  anchors1(x)  anchors2(x)  seqnames1(x)  seqnames2(x)  start1(x)  start2(x)  end1(x)  end2(x)  width1(x)  width2(x)  strand1(x)  strand2(x)  ranges1(x)  ranges2(x)  # S4 method for GInteractions anchors1(x)  # S4 method for GInteractions anchors2(x)  # S4 method for GInteractions seqnames1(x)  # S4 method for GInteractions seqnames2(x)  # S4 method for GInteractions start1(x)  # S4 method for GInteractions start2(x)  # S4 method for GInteractions end1(x)  # S4 method for GInteractions end2(x)  # S4 method for GInteractions width1(x)  # S4 method for GInteractions width2(x)  # S4 method for GInteractions strand1(x)  # S4 method for GInteractions strand2(x)  # S4 method for GInteractions ranges1(x)  # S4 method for GInteractions ranges2(x)"},{"path":"/reference/ginteractions-getters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enhanced GInteractions getters — ginteractions-getters","text":"x GInteractions object name pattern name column stored GInteractions metadata (mcols).","code":""},{"path":"/reference/ginteractions-getters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enhanced GInteractions getters — ginteractions-getters","text":"One core GInteractions fields (e.g. seqnames1, start1, ...) one metadata columns using $. Note auto-completion works $.","code":""},{"path":"/reference/ginteractions-getters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enhanced GInteractions getters — ginteractions-getters","text":"","code":"gi <- data.frame(   seqnames1 = 'chr1', start1 = 1, end1 = 10,    seqnames2 = 'chr1', start2 = 2, end2 = 20 ) |> as_ginteractions() |> mutate(type = 'cis') anchors1(gi) #> GRanges object with 1 range and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chr1      1-10      * #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths anchors2(gi) #> GRanges object with 1 range and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chr1      2-20      * #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths seqnames1(gi) #> factor-Rle of length 1 with 1 run #>   Lengths:    1 #>   Values : chr1 #> Levels(1): chr1 seqnames2(gi) #> factor-Rle of length 1 with 1 run #>   Lengths:    1 #>   Values : chr1 #> Levels(1): chr1 start1(gi) #> [1] 1 start2(gi) #> [1] 2 end1(gi) #> [1] 10 end2(gi) #> [1] 20 width1(gi) #> [1] 10 width2(gi) #> [1] 19 ranges1(gi) #> IRanges object with 1 range and 0 metadata columns: #>           start       end     width #>       <integer> <integer> <integer> #>   [1]         1        10        10 ranges2(gi) #> IRanges object with 1 range and 0 metadata columns: #>           start       end     width #>       <integer> <integer> <integer> #>   [1]         2        20        19 strand1(gi) #> factor-Rle of length 1 with 1 run #>   Lengths: 1 #>   Values : * #> Levels(3): + - * strand2(gi) #> factor-Rle of length 1 with 1 run #>   Lengths: 1 #>   Values : * #> Levels(3): + - * gi$type #> [1] \"cis\""},{"path":"/reference/ginteractions-pin.html","id":null,"dir":"Reference","previous_headings":"","what":"Pin GInteractions by anchors set (anchors1 or anchors2). — pin","title":"Pin GInteractions by anchors set (anchors1 or anchors2). — pin","text":"Pin GInteractions anchors set (anchors1 anchors2).","code":""},{"path":"/reference/ginteractions-pin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pin GInteractions by anchors set (anchors1 or anchors2). — pin","text":"","code":"pin(x, anchors)  # S4 method for GroupedGInteractions,character pin(x, anchors)  # S4 method for GroupedGInteractions,numeric pin(x, anchors)  # S4 method for GInteractions,character pin(x, anchors)  # S4 method for GInteractions,numeric pin(x, anchors)  # S4 method for PinnedGInteractions,missing pin(x, anchors)  # S4 method for PinnedGInteractions,character pin(x, anchors)  # S4 method for PinnedGInteractions,numeric pin(x, anchors)  # S4 method for AnchoredPinnedGInteractions,character pin(x, anchors)  # S4 method for AnchoredPinnedGInteractions,numeric pin(x, anchors)  pin_by(x, anchors)  pin_first(x)  pin_second(x)  pin_anchors1(x)  pin_anchors2(x)  unpin(x)  # S4 method for AnchoredPinnedGInteractions unpin(x)  # S4 method for PinnedGInteractions unpin(x)  # S4 method for GInteractions unpin(x)  pinned_anchors(x)  # S4 method for PinnedGInteractions pinned_anchors(x)  # S4 method for AnchoredPinnedGInteractions pinned_anchors(x)"},{"path":"/reference/ginteractions-pin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pin GInteractions by anchors set (anchors1 or anchors2). — pin","text":"x GInteractions object anchors Anchors pin (\"first\" \"second\")","code":""},{"path":"/reference/ginteractions-pin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pin GInteractions by anchors set (anchors1 or anchors2). — pin","text":"pin_* functions return PinnedGInteractions object. pin returns numerical value indicating set anchors pinned. unpin removes pinning PinnedGInteractions object. pinned_anchors returns (Anchored)GenomicRanges object corresponding pinned anchors PinnedGInteractions object.","code":""},{"path":"/reference/ginteractions-pin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pin GInteractions by anchors set (anchors1 or anchors2). — pin","text":"","code":"gi <- read.table(text = \" chr1 11 20 chr1 21 30 chr1 11 20 chr1 51 55 chr1 11 30 chr1 51 55 chr1 11 30 chr2 51 60\", col.names = c(\"seqnames1\", \"start1\", \"end1\", \"seqnames2\", \"start2\", \"end2\")) |>    as_ginteractions() |>    mutate(type = c('cis', 'cis', 'cis', 'trans'), score = runif(4))  #################################################################### # 1. Pin by first anchors ####################################################################  gi |> pin_by(\"first\") #> PinnedGInteractions object with 4 interactions and 2 metadata columns: #> Pinned on: anchors1 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     11-20       * ---      chr1     21-30       * |         cis #>   [2]      chr1     11-20       * ---      chr1     51-55       * |         cis #>   [3]      chr1     11-30       * ---      chr1     51-55       * |         cis #>   [4]      chr1     11-30       * ---      chr2     51-60       * |       trans #>           score #>       <numeric> #>   [1]  0.322944 #>   [2]  0.959966 #>   [3]  0.671154 #>   [4]  0.469257 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> pin_first() #> PinnedGInteractions object with 4 interactions and 2 metadata columns: #> Pinned on: anchors1 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     11-20       * ---      chr1     21-30       * |         cis #>   [2]      chr1     11-20       * ---      chr1     51-55       * |         cis #>   [3]      chr1     11-30       * ---      chr1     51-55       * |         cis #>   [4]      chr1     11-30       * ---      chr2     51-60       * |       trans #>           score #>       <numeric> #>   [1]  0.322944 #>   [2]  0.959966 #>   [3]  0.671154 #>   [4]  0.469257 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> pin_anchors1() #> PinnedGInteractions object with 4 interactions and 2 metadata columns: #> Pinned on: anchors1 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     11-20       * ---      chr1     21-30       * |         cis #>   [2]      chr1     11-20       * ---      chr1     51-55       * |         cis #>   [3]      chr1     11-30       * ---      chr1     51-55       * |         cis #>   [4]      chr1     11-30       * ---      chr2     51-60       * |       trans #>           score #>       <numeric> #>   [1]  0.322944 #>   [2]  0.959966 #>   [3]  0.671154 #>   [4]  0.469257 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  #################################################################### # 2. Pin by second anchors ####################################################################  gi |> pin_by(\"second\") #> PinnedGInteractions object with 4 interactions and 2 metadata columns: #> Pinned on: anchors2 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     11-20       * ---      chr1     21-30       * |         cis #>   [2]      chr1     11-20       * ---      chr1     51-55       * |         cis #>   [3]      chr1     11-30       * ---      chr1     51-55       * |         cis #>   [4]      chr1     11-30       * ---      chr2     51-60       * |       trans #>           score #>       <numeric> #>   [1]  0.322944 #>   [2]  0.959966 #>   [3]  0.671154 #>   [4]  0.469257 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> pin_second() #> PinnedGInteractions object with 4 interactions and 2 metadata columns: #> Pinned on: anchors2 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     11-20       * ---      chr1     21-30       * |         cis #>   [2]      chr1     11-20       * ---      chr1     51-55       * |         cis #>   [3]      chr1     11-30       * ---      chr1     51-55       * |         cis #>   [4]      chr1     11-30       * ---      chr2     51-60       * |       trans #>           score #>       <numeric> #>   [1]  0.322944 #>   [2]  0.959966 #>   [3]  0.671154 #>   [4]  0.469257 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> pin_anchors2() #> PinnedGInteractions object with 4 interactions and 2 metadata columns: #> Pinned on: anchors2 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     11-20       * ---      chr1     21-30       * |         cis #>   [2]      chr1     11-20       * ---      chr1     51-55       * |         cis #>   [3]      chr1     11-30       * ---      chr1     51-55       * |         cis #>   [4]      chr1     11-30       * ---      chr2     51-60       * |       trans #>           score #>       <numeric> #>   [1]  0.322944 #>   [2]  0.959966 #>   [3]  0.671154 #>   [4]  0.469257 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  #################################################################### # 3. Unpin ####################################################################  gi |> pin(\"second\") |> unpin() #> GInteractions object with 4 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     11-20       * ---      chr1     21-30       * |         cis #>   [2]      chr1     11-20       * ---      chr1     51-55       * |         cis #>   [3]      chr1     11-30       * ---      chr1     51-55       * |         cis #>   [4]      chr1     11-30       * ---      chr2     51-60       * |       trans #>           score #>       <numeric> #>   [1]  0.322944 #>   [2]  0.959966 #>   [3]  0.671154 #>   [4]  0.469257 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/reference/ginteractions-setters.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal GInteractions setters — ginteractions-setters","title":"Internal GInteractions setters — ginteractions-setters","text":"Internal GInteractions setters","code":""},{"path":"/reference/ginteractions-setters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal GInteractions setters — ginteractions-setters","text":"","code":"# S4 method for GInteractions first(x) <- value  # S4 method for GInteractions second(x) <- value  set_seqnames1(x, value)  set_seqnames2(x, value)  set_start1(x, value)  set_start2(x, value)  set_end1(x, value)  set_end2(x, value)  set_width1(x, value)  set_width2(x, value)  set_strand1(x, value)  set_strand2(x, value)  # S4 method for GInteractions,factor set_seqnames1(x, value)  # S4 method for GInteractions,factor set_seqnames2(x, value)  # S4 method for GInteractions,numeric set_start1(x, value)  # S4 method for GInteractions,numeric set_start2(x, value)  # S4 method for GInteractions,numeric set_end1(x, value)  # S4 method for GInteractions,numeric set_end2(x, value)  # S4 method for GInteractions,numeric set_width1(x, value)  # S4 method for GInteractions,numeric set_width2(x, value)  # S4 method for AnchoredPinnedGInteractions,numeric set_width1(x, value)  # S4 method for AnchoredPinnedGInteractions,numeric set_width2(x, value)  # S4 method for GInteractions,character set_strand1(x, value)  # S4 method for GInteractions,character set_strand2(x, value)"},{"path":"/reference/ginteractions-setters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal GInteractions setters — ginteractions-setters","text":"x GInteractions object value value passed corresponding field","code":""},{"path":"/reference/ginteractions-setters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal GInteractions setters — ginteractions-setters","text":"modified GInteractions","code":""},{"path":"/reference/group-group_data.html","id":null,"dir":"Reference","previous_headings":"","what":"GInteractions grouping metadata — group-group_data","title":"GInteractions grouping metadata — group-group_data","text":"GInteractions grouping metadata","code":""},{"path":"/reference/group-group_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GInteractions grouping metadata — group-group_data","text":"","code":"# S3 method for GroupedGInteractions group_data(.data)  # S3 method for GroupedGInteractions group_keys(.tbl, ...)  # S3 method for GroupedGInteractions group_indices(.data, ...)  # S3 method for GInteractions group_vars(x)  # S3 method for GroupedGInteractions group_vars(x)  # S3 method for GroupedGInteractions groups(x)  # S3 method for GroupedGInteractions group_size(x)  # S3 method for GroupedGInteractions n_groups(x)"},{"path":"/reference/group-group_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GInteractions grouping metadata — group-group_data","text":".data, .tbl, x GInteractions object ... Ignored.","code":""},{"path":"/reference/group-group_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GInteractions grouping metadata — group-group_data","text":"GInteractions object.","code":""},{"path":"/reference/group-group_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GInteractions grouping metadata — group-group_data","text":"","code":"gi <- read.table(text = \" chr1 11 20 chr1 21 30 chr1 11 20 chr1 51 55 chr1 11 30 chr1 51 55 chr1 11 30 chr2 51 60\", col.names = c(\"seqnames1\", \"start1\", \"end1\", \"seqnames2\", \"start2\", \"end2\")) |>    as_ginteractions() |>    mutate(type = c('cis', 'cis', 'cis', 'trans'), score = runif(4))  ggi <- gi |> group_by(end1) ggi #> GroupedGInteractions object with 4 interactions and 2 metadata columns: #> Groups: end1 [2] #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     11-20       * ---      chr1     21-30       * |         cis #>   [2]      chr1     11-20       * ---      chr1     51-55       * |         cis #>   [3]      chr1     11-30       * ---      chr1     51-55       * |         cis #>   [4]      chr1     11-30       * ---      chr2     51-60       * |       trans #>           score #>       <numeric> #>   [1]  0.176503 #>   [2]  0.675564 #>   [3]  0.990423 #>   [4]  0.963105 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths group_data(ggi) #> DataFrame with 2 rows and 2 columns #>        end1         .rows #>   <integer> <IntegerList> #> 1        20           1,2 #> 2        30           3,4 group_keys(ggi) #> DataFrame with 2 rows and 1 column #>        end1 #>   <integer> #> 1        20 #> 2        30 group_rows(ggi) #> IntegerList of length 2 #> [[1]] 1 2 #> [[2]] 3 4 group_indices(ggi) #> integer-Rle of length 4 with 2 runs #>   Lengths: 2 2 #>   Values : 1 2 group_vars(ggi) #> [1] \"end1\" groups(ggi) #> [[1]] #> end1 #>  group_size(ggi) #> [1] 2 2 n_groups(ggi) #> [1] 2"},{"path":"/reference/plyranges-flank.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate flanking regions from pinned anchors of a GInteractions object\nwith plyranges — plyranges-flank","title":"Generate flanking regions from pinned anchors of a GInteractions object\nwith plyranges — plyranges-flank","text":"Generate flanking regions pinned anchors GInteractions object plyranges","code":""},{"path":"/reference/plyranges-flank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate flanking regions from pinned anchors of a GInteractions object\nwith plyranges — plyranges-flank","text":"","code":"flank_downstream(x, width)  # S3 method for Ranges flank_downstream(x, width)  # S3 method for PinnedGInteractions flank_downstream(x, width)  flank_upstream(x, width)  # S3 method for Ranges flank_upstream(x, width)  # S3 method for PinnedGInteractions flank_upstream(x, width)  flank_right(x, width)  # S3 method for Ranges flank_right(x, width)  # S3 method for PinnedGInteractions flank_right(x, width)  flank_left(x, width)  # S3 method for Ranges flank_left(x, width)  # S3 method for PinnedGInteractions flank_left(x, width)"},{"path":"/reference/plyranges-flank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate flanking regions from pinned anchors of a GInteractions object\nwith plyranges — plyranges-flank","text":"x PinnedGInteractions object width width flanking region relative ranges x. Either integer vector length 1 integer vector length x. width can negative case flanking region reversed.","code":""},{"path":"/reference/plyranges-flank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate flanking regions from pinned anchors of a GInteractions object\nwith plyranges — plyranges-flank","text":"PinnedGInteractions object","code":""},{"path":"/reference/plyranges-flank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate flanking regions from pinned anchors of a GInteractions object\nwith plyranges — plyranges-flank","text":"","code":"gi <- read.table(text = \" chr1 11 20 chr1 21 30 + + chr1 11 20 chr1 51 55 + + chr1 11 30 chr1 51 55 - - chr1 11 30 chr2 51 60 - -\", col.names = c(   \"seqnames1\", \"start1\", \"end1\",    \"seqnames2\", \"start2\", \"end2\", \"strand1\", \"strand2\") ) |>    as_ginteractions() |>    mutate(score = runif(4), type = c('cis', 'cis', 'cis', 'trans'))  #################################################################### # 1. Simple flanking ####################################################################  gi  #> GInteractions object with 4 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |     score #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <numeric> #>   [1]      chr1     11-20       + ---      chr1     21-30       + |  0.298892 #>   [2]      chr1     11-20       + ---      chr1     51-55       + |  0.351956 #>   [3]      chr1     11-30       - ---      chr1     51-55       - |  0.139383 #>   [4]      chr1     11-30       - ---      chr2     51-60       - |  0.539332 #>              type #>       <character> #>   [1]         cis #>   [2]         cis #>   [3]         cis #>   [4]       trans #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> pin_by(\"first\") |> flank_left(-2)  #> PinnedGInteractions object with 4 interactions and 2 metadata columns: #> Pinned on: anchors1 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |     score #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <numeric> #>   [1]      chr1     11-12       + ---      chr1     21-30       + |  0.298892 #>   [2]      chr1     11-12       + ---      chr1     51-55       + |  0.351956 #>   [3]      chr1     11-12       - ---      chr1     51-55       - |  0.139383 #>   [4]      chr1     11-12       - ---      chr2     51-60       - |  0.539332 #>              type #>       <character> #>   [1]         cis #>   [2]         cis #>   [3]         cis #>   [4]       trans #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> pin_by(\"second\") |> flank_upstream(4) #> PinnedGInteractions object with 4 interactions and 2 metadata columns: #> Pinned on: anchors2 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |     score #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <numeric> #>   [1]      chr1     11-20       + ---      chr1     17-20       + |  0.298892 #>   [2]      chr1     11-20       + ---      chr1     47-50       + |  0.351956 #>   [3]      chr1     11-30       - ---      chr1     56-59       - |  0.139383 #>   [4]      chr1     11-30       - ---      chr2     61-64       - |  0.539332 #>              type #>       <character> #>   [1]         cis #>   [2]         cis #>   [3]         cis #>   [4]       trans #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  #################################################################### # 2. Chained flanking of each set of anchors ####################################################################  gi |>    pin_by(\"first\") |> flank_left(2) |>    pin_by(\"second\") |> flank_right(2) #> PinnedGInteractions object with 4 interactions and 2 metadata columns: #> Pinned on: anchors2 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |     score #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <numeric> #>   [1]      chr1      9-10       + ---      chr1     31-32       + |  0.298892 #>   [2]      chr1      9-10       + ---      chr1     56-57       + |  0.351956 #>   [3]      chr1      9-10       - ---      chr1     56-57       - |  0.139383 #>   [4]      chr1      9-10       - ---      chr2     61-62       - |  0.539332 #>              type #>       <character> #>   [1]         cis #>   [2]         cis #>   [3]         cis #>   [4]       trans #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/reference/plyranges-shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift pinned anchors of a GInteractions object with plyranges — plyranges-shift","title":"Shift pinned anchors of a GInteractions object with plyranges — plyranges-shift","text":"Shift pinned anchors GInteractions object plyranges","code":""},{"path":"/reference/plyranges-shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shift pinned anchors of a GInteractions object with plyranges — plyranges-shift","text":"","code":"shift_downstream(x, shift)  # S3 method for Ranges shift_downstream(x, shift)  # S3 method for PinnedGInteractions shift_downstream(x, shift)  shift_upstream(x, shift)  # S3 method for Ranges shift_upstream(x, shift)  # S3 method for PinnedGInteractions shift_upstream(x, shift)  shift_right(x, shift)  # S3 method for Ranges shift_right(x, shift)  # S3 method for PinnedGInteractions shift_right(x, shift)  shift_left(x, shift)  # S3 method for Ranges shift_left(x, shift)  # S3 method for PinnedGInteractions shift_left(x, shift)"},{"path":"/reference/plyranges-shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shift pinned anchors of a GInteractions object with plyranges — plyranges-shift","text":"x PinnedGInteractions object shift amount move genomic interval Ranges object . Either non-negative integer vector length 1 integer vector length x.","code":""},{"path":"/reference/plyranges-shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shift pinned anchors of a GInteractions object with plyranges — plyranges-shift","text":"PinnedGInteractions object","code":""},{"path":"/reference/plyranges-shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shift pinned anchors of a GInteractions object with plyranges — plyranges-shift","text":"","code":"gi <- read.table(text = \" chr1 11 20 chr1 21 30 + + chr1 11 20 chr1 51 55 + + chr1 11 30 chr1 51 55 - - chr1 11 30 chr2 51 60 - -\", col.names = c(   \"seqnames1\", \"start1\", \"end1\",    \"seqnames2\", \"start2\", \"end2\", \"strand1\", \"strand2\") ) |>    as_ginteractions() |>    mutate(score = runif(4), type = c('cis', 'cis', 'cis', 'trans'))  #################################################################### # 1. Simple shifting ####################################################################  gi  #> GInteractions object with 4 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |     score #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <numeric> #>   [1]      chr1     11-20       + ---      chr1     21-30       + | 0.8676182 #>   [2]      chr1     11-20       + ---      chr1     51-55       + | 0.1543988 #>   [3]      chr1     11-30       - ---      chr1     51-55       - | 0.0397781 #>   [4]      chr1     11-30       - ---      chr2     51-60       - | 0.3271101 #>              type #>       <character> #>   [1]         cis #>   [2]         cis #>   [3]         cis #>   [4]       trans #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> pin_by(\"first\") |> shift_left(15) #> PinnedGInteractions object with 4 interactions and 2 metadata columns: #> Pinned on: anchors1 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |     score #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <numeric> #>   [1]      chr1      -4-5       + ---      chr1     21-30       + | 0.8676182 #>   [2]      chr1      -4-5       + ---      chr1     51-55       + | 0.1543988 #>   [3]      chr1     -4-15       - ---      chr1     51-55       - | 0.0397781 #>   [4]      chr1     -4-15       - ---      chr2     51-60       - | 0.3271101 #>              type #>       <character> #>   [1]         cis #>   [2]         cis #>   [3]         cis #>   [4]       trans #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> pin_by(\"second\") |> shift_downstream(10) #> PinnedGInteractions object with 4 interactions and 2 metadata columns: #> Pinned on: anchors2 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |     score #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <numeric> #>   [1]      chr1     11-20       + ---      chr1     31-40       + | 0.8676182 #>   [2]      chr1     11-20       + ---      chr1     61-65       + | 0.1543988 #>   [3]      chr1     11-30       - ---      chr1     41-45       - | 0.0397781 #>   [4]      chr1     11-30       - ---      chr2     41-50       - | 0.3271101 #>              type #>       <character> #>   [1]         cis #>   [2]         cis #>   [3]         cis #>   [4]       trans #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  #################################################################### # 2. Chained shifting of each set of anchors ####################################################################  gi |>    pin_by(\"first\") |> shift_downstream(20) |>    pin_by(\"second\") |> shift_upstream(20) #> PinnedGInteractions object with 4 interactions and 2 metadata columns: #> Pinned on: anchors2 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |     score #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <numeric> #>   [1]      chr1     31-40       + ---      chr1      1-10       + | 0.8676182 #>   [2]      chr1     31-40       + ---      chr1     31-35       + | 0.1543988 #>   [3]      chr1     -9-10       - ---      chr1     71-75       - | 0.0397781 #>   [4]      chr1     -9-10       - ---      chr2     71-80       - | 0.3271101 #>              type #>       <character> #>   [1]         cis #>   [2]         cis #>   [3]         cis #>   [4]       trans #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/reference/plyranges-stretch.html","id":null,"dir":"Reference","previous_headings":"","what":"Stretch pinned anchors of a GInteractions object with plyranges — plyranges-stretch","title":"Stretch pinned anchors of a GInteractions object with plyranges — plyranges-stretch","text":"Stretch pinned anchors GInteractions object plyranges","code":""},{"path":"/reference/plyranges-stretch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stretch pinned anchors of a GInteractions object with plyranges — plyranges-stretch","text":"","code":"# S3 method for AnchoredPinnedGInteractions stretch(x, extend)  # S3 method for PinnedGInteractions stretch(x, extend)"},{"path":"/reference/plyranges-stretch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stretch pinned anchors of a GInteractions object with plyranges — plyranges-stretch","text":"x PinnedGInteractions object extend amount alter width Ranges object . Either integer vector length 1 integer vector length x.","code":""},{"path":"/reference/plyranges-stretch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stretch pinned anchors of a GInteractions object with plyranges — plyranges-stretch","text":"PinnedGInteractions object","code":""},{"path":"/reference/plyranges-stretch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stretch pinned anchors of a GInteractions object with plyranges — plyranges-stretch","text":"","code":"gi <- read.table(text = \" chr1 11 20 chr1 21 30 + + chr1 11 20 chr1 51 55 + + chr1 11 30 chr1 51 55 - - chr1 11 30 chr2 51 60 - -\", col.names = c(   \"seqnames1\", \"start1\", \"end1\",    \"seqnames2\", \"start2\", \"end2\", \"strand1\", \"strand2\") ) |>    as_ginteractions() |>    mutate(score = runif(4), type = c('cis', 'cis', 'cis', 'trans'))  #################################################################### # 1. Simple stretching ####################################################################  gi  #> GInteractions object with 4 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |     score #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <numeric> #>   [1]      chr1     11-20       + ---      chr1     21-30       + |  0.725651 #>   [2]      chr1     11-20       + ---      chr1     51-55       + |  0.220992 #>   [3]      chr1     11-30       - ---      chr1     51-55       - |  0.513838 #>   [4]      chr1     11-30       - ---      chr2     51-60       - |  0.411524 #>              type #>       <character> #>   [1]         cis #>   [2]         cis #>   [3]         cis #>   [4]       trans #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> pin_by(\"first\") |> anchor_start() |> stretch(15) #> PinnedGInteractions object with 4 interactions and 2 metadata columns: #> Pinned on: anchors1 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |     score #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <numeric> #>   [1]      chr1     11-35       + ---      chr1     21-30       + |  0.725651 #>   [2]      chr1     11-35       + ---      chr1     51-55       + |  0.220992 #>   [3]      chr1     11-45       - ---      chr1     51-55       - |  0.513838 #>   [4]      chr1     11-45       - ---      chr2     51-60       - |  0.411524 #>              type #>       <character> #>   [1]         cis #>   [2]         cis #>   [3]         cis #>   [4]       trans #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> pin_by(\"second\") |> anchor_center() |> stretch(10) #> PinnedGInteractions object with 4 interactions and 2 metadata columns: #> Pinned on: anchors2 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |     score #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <numeric> #>   [1]      chr1     11-20       + ---      chr1     16-35       + |  0.725651 #>   [2]      chr1     11-20       + ---      chr1     46-60       + |  0.220992 #>   [3]      chr1     11-30       - ---      chr1     46-60       - |  0.513838 #>   [4]      chr1     11-30       - ---      chr2     46-65       - |  0.411524 #>              type #>       <character> #>   [1]         cis #>   [2]         cis #>   [3]         cis #>   [4]       trans #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> pin_by(\"second\") |> anchor_3p() |> stretch(20) #> PinnedGInteractions object with 4 interactions and 2 metadata columns: #> Pinned on: anchors2 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |     score #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <numeric> #>   [1]      chr1     11-20       + ---      chr1      1-30       + |  0.725651 #>   [2]      chr1     11-20       + ---      chr1     31-55       + |  0.220992 #>   [3]      chr1     11-30       - ---      chr1     51-75       - |  0.513838 #>   [4]      chr1     11-30       - ---      chr2     51-80       - |  0.411524 #>              type #>       <character> #>   [1]         cis #>   [2]         cis #>   [3]         cis #>   [4]       trans #>   ------- #>   regions: 6 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  #################################################################### # 2. Chained stretching of each set of anchors ####################################################################  gi |>    pin_by(\"first\") |> anchor_start() |> stretch(20) |>    pin_by(\"second\") |> stretch(20) #> PinnedGInteractions object with 4 interactions and 2 metadata columns: #> Pinned on: anchors2 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |     score #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <numeric> #>   [1]      chr1     11-40       + ---      chr1     11-40       + |  0.725651 #>   [2]      chr1     11-40       + ---      chr1     41-65       + |  0.220992 #>   [3]      chr1     11-50       - ---      chr1     41-65       - |  0.513838 #>   [4]      chr1     11-50       - ---      chr2     41-70       - |  0.411524 #>              type #>       <character> #>   [1]         cis #>   [2]         cis #>   [3]         cis #>   [4]       trans #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr arrange, count, filter, group_by, group_data, group_indices, group_keys, group_rows, group_size, group_vars, groups, mutate, n_groups, rename, select, slice, summarise, summarize, tally, ungroup plyranges anchor, anchor_3p, anchor_5p, anchor_center, anchor_end, anchor_start, count_overlaps, count_overlaps_directed, filter_by_non_overlaps, filter_by_overlaps, find_overlaps, find_overlaps_directed, stretch, unanchor","code":""},{"path":"/reference/reexports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Objects exported from other packages — reexports","text":"Depending re-exported function","code":""},{"path":"/reference/reexports.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Objects exported from other packages — reexports","text":"","code":"1 + 1 #> [1] 2"},{"path":"/reference/replace_anchors.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace anchors of a GInteractions — replace_anchors","title":"Replace anchors of a GInteractions — replace_anchors","text":"Replace anchors GInteractions","code":""},{"path":"/reference/replace_anchors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace anchors of a GInteractions — replace_anchors","text":"","code":"replace_anchors(x, id, value)  # S4 method for GInteractions,character,GenomicRanges replace_anchors(x, id, value)  # S4 method for GInteractions,numeric,GenomicRanges replace_anchors(x, id, value)  # S4 method for PinnedGInteractions,missing,GenomicRanges replace_anchors(x, id, value)  # S4 method for AnchoredPinnedGInteractions,missing,GRanges replace_anchors(x, id, value)  # S4 method for AnchoredPinnedGInteractions,numeric,GRanges replace_anchors(x, id, value)"},{"path":"/reference/replace_anchors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace anchors of a GInteractions — replace_anchors","text":"x (Pinned)GInteractions object id anchors replace (\"first\" \"second\"). Ignored GInteractions already pinned specific set anchors. value GRanges object vector length x.","code":""},{"path":"/reference/replace_anchors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace anchors of a GInteractions — replace_anchors","text":"(Pinned)GInteractions object.","code":""},{"path":"/reference/replace_anchors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace anchors of a GInteractions — replace_anchors","text":"","code":"gi <- read.table(text = \" chr1 11 20 chr1 21 30 chr1 11 20 chr1 51 55 chr1 11 30 chr1 51 55 chr1 11 30 chr2 51 60\", col.names = c(\"seqnames1\", \"start1\", \"end1\", \"seqnames2\", \"start2\", \"end2\")) |>    as_ginteractions() |>    mutate(type = c('cis', 'cis', 'cis', 'trans'), score = runif(4))  #################################################################### # 1. Replace anchors of a GInteractions object ####################################################################  gi |> replace_anchors(2, value = anchors1(gi)) #> GInteractions object with 4 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     11-20       * ---      chr1     11-20       * |         cis #>   [2]      chr1     11-20       * ---      chr1     11-20       * |         cis #>   [3]      chr1     11-30       * ---      chr1     11-30       * |         cis #>   [4]      chr1     11-30       * ---      chr1     11-30       * |       trans #>           score #>       <numeric> #>   [1]  0.448009 #>   [2]  0.471030 #>   [3]  0.429417 #>   [4]  0.221245 #>   ------- #>   regions: 2 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> replace_anchors(1, value = anchors2(gi)) #> GInteractions object with 4 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     21-30       * ---      chr1     21-30       * |         cis #>   [2]      chr1     51-55       * ---      chr1     51-55       * |         cis #>   [3]      chr1     51-55       * ---      chr1     51-55       * |         cis #>   [4]      chr2     51-60       * ---      chr2     51-60       * |       trans #>           score #>       <numeric> #>   [1]  0.448009 #>   [2]  0.471030 #>   [3]  0.429417 #>   [4]  0.221245 #>   ------- #>   regions: 3 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> replace_anchors(1, value = GenomicRanges::GRanges(c(   \"chr1:1-2\", \"chr1:2-3\", \"chr1:3-4\", \"chr1:4-5\" ))) #> GInteractions object with 4 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1       1-2       * ---      chr1     21-30       * |         cis #>   [2]      chr1       2-3       * ---      chr1     51-55       * |         cis #>   [3]      chr1       3-4       * ---      chr1     51-55       * |         cis #>   [4]      chr1       4-5       * ---      chr2     51-60       * |       trans #>           score #>       <numeric> #>   [1]  0.448009 #>   [2]  0.471030 #>   [3]  0.429417 #>   [4]  0.221245 #>   ------- #>   regions: 7 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  #################################################################### # 2. Replace anchors of a pinned GInteractions object ####################################################################  gi |> pin_by(1) |> replace_anchors(value = anchors1(gi)) #> PinnedGInteractions object with 4 interactions and 2 metadata columns: #> Pinned on: anchors1 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     11-20       * ---      chr1     21-30       * |         cis #>   [2]      chr1     11-20       * ---      chr1     51-55       * |         cis #>   [3]      chr1     11-30       * ---      chr1     51-55       * |         cis #>   [4]      chr1     11-30       * ---      chr2     51-60       * |       trans #>           score #>       <numeric> #>   [1]  0.448009 #>   [2]  0.471030 #>   [3]  0.429417 #>   [4]  0.221245 #>   ------- #>   regions: 5 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |> replace_anchors(1, value = anchors2(gi)) #> GInteractions object with 4 interactions and 2 metadata columns: #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1     21-30       * ---      chr1     21-30       * |         cis #>   [2]      chr1     51-55       * ---      chr1     51-55       * |         cis #>   [3]      chr1     51-55       * ---      chr1     51-55       * |         cis #>   [4]      chr2     51-60       * ---      chr2     51-60       * |       trans #>           score #>       <numeric> #>   [1]  0.448009 #>   [2]  0.471030 #>   [3]  0.429417 #>   [4]  0.221245 #>   ------- #>   regions: 3 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths  gi |>    pin_by(1) |>    replace_anchors(value = GenomicRanges::GRanges(c(     \"chr1:1-2\", \"chr1:2-3\", \"chr1:3-4\", \"chr1:4-5\"   ))) |>    pin_by(2) |>    replace_anchors(value = GenomicRanges::GRanges(c(     \"chr2:1-2\", \"chr2:2-3\", \"chr2:3-4\", \"chr2:4-5\"   )))  #> PinnedGInteractions object with 4 interactions and 2 metadata columns: #> Pinned on: anchors2 #>       seqnames1   ranges1 strand1     seqnames2   ranges2 strand2 |        type #>           <Rle> <IRanges>   <Rle>         <Rle> <IRanges>   <Rle> | <character> #>   [1]      chr1       1-2       * ---      chr2       1-2       * |         cis #>   [2]      chr1       2-3       * ---      chr2       2-3       * |         cis #>   [3]      chr1       3-4       * ---      chr2       3-4       * |         cis #>   [4]      chr1       4-5       * ---      chr2       4-5       * |       trans #>           score #>       <numeric> #>   [1]  0.448009 #>   [2]  0.471030 #>   [3]  0.429417 #>   [4]  0.221245 #>   ------- #>   regions: 8 ranges and 0 metadata columns #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"}]
